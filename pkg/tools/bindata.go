// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\x38\x16\x7e\xcf\xaf\x38\x68\x80\xed\x0c\xb0\x8a\x93\x62\x67\xa7\x63\xec\x3e\xa4\xb1\x27\x63\x34\xb1\x0d\xe7\xd2\x79\x33\x68\xea\x58\xe6\x9a\x22\xb5\x24\xa5\xc4\xfb\xeb\x17\x24\x25\x45\x37\x3b\x8e\x9b\x04\x9d\xbc\xd4\xe5\xe5\xe3\xb9\x5f\x28\x06\x41\x70\x44\x12\x76\x8f\x4a\x33\x29\xfa\x40\x92\x44\xf7\xb2\xb3\xa3\x35\x13\x61\x1f\x06\x04\x63\x29\x6e\xd0\x1c\xc5\x68\x48\x48\x0c\xe9\x1f\x01\x08\x12\x63\x1f\x32\xa6\x0c\x47\x93\xff\x5f\x27\x84\x62\x1f\xd6\xe9\x02\x03\xbd\xd1\x06\xe3\x23\x9d\x20\xb5\xcb\x35\x72\xa4\x46\x2a\xfb\x1b\x20\x26\x86\xae\xae\xc8\x02\xb9\xf6\x03\x00\x2a\x15\x86\xd5\x21\x0d\xc6\x09\x27\x06\xf3\x3d\x95\xc3\xed\x5f\x93\x00\xfb\xc7\x6b\x90\x9d\xa0\x00\x05\x49\xf6\x6f\x25\xb5\x19\xa3\x79\x90\x6a\xdd\x07\xa3\x52\xcc\xc7\x43\xa1\xa7\x92\x33\xba\xe9\xc3\x05\x4f\xb5\x41\xf5\x3b\x53\xda\x7c\x63\x66\xf5\x87\xdf\x92\x2f\x3c\x76\x10\xd3\xd1\x00\x98\x76\x00\x60\x24\xfc\x74\xf6\x33\xa0\x20\x0b\x8e\x70\x7f\xad\xed\x88\x4e\x55\xc6\x32\x2c\xe8\x00\x2a\x85\x21\x4c\xa0\x02\x85\xda\x10\xf5\x04\xf7\x93\x91\xb0\x40\xa0\x2b\xa4\x6b\x0c\x7f\x06\x22\x42\xf8\xe9\xd3\xcf\x16\x24\x87\x34\x2b\x84\x54\x23\xc8\x25\x08\x8d\xc2\xa0\x02\x26\x80\x09\x56\x81\xad\xb0\x37\x1d\x0d\x6a\xac\x1d\xc3\x42\x4a\xa3\x8d\x22\x09\x24\x4a\x52\x0c\x53\x85\x20\x10\x43\x47\x29\x55\x48\x0c\x02\xb1\x58\x4b\x16\xc5\x24\xb1\xe8\x15\x95\x3e\x69\x3a\x07\xd4\xa8\x32\x46\xf1\x9c\x52\x99\x0a\x33\xae\xa9\xa5\x3c\x53\x0a\xbe\xb1\xea\x80\xfb\x5c\x02\x89\x0c\x35\x48\xe1\xb8\x11\x32\x44\x0d\x0f\xcc\xac\x00\x1f\x8d\x22\x33\xaf\xb6\x7f\x17\xd2\x72\x6a\xcd\xa1\xc8\x72\x69\x59\xdd\x3c\x29\xd9\xee\x3e\x6f\x8d\x02\x28\xfc\x6f\xca\x14\x86\x83\x54\x31\x11\xdd\xd0\x15\x86\x29\x67\x22\x1a\x45\x42\x96\xc3\xc3\x47\xa4\xa9\xb1\x56\x5f\xd9\xe9\x31\x6f\x72\x93\xbd\x45\x15\xeb\xfa\x74\xe0\x2d\x78\xf8\x98\x28\xd4\xd6\x67\x1a\xf3\x76\xc5\x1a\x37\xfd\x1a\x3b\x8d\x15\x00\x32\x41\x45\xac\x4f\xc0\x48\xb4\x26\x33\xc2\x53\x6c\xc1\x5a\xe0\x86\x6c\x2d\xdf\x17\x85\xde\xcb\x0d\xc7\x70\xbb\xc2\x86\x51\x00\x95\x09\x43\x5d\x00\x7c\xd4\xb0\xe4\xf8\x98\x49\x9e\xc6\x08\xa1\x62\x59\x69\x37\xc7\xd6\x12\xac\x66\x42\x5c\x92\x94\x1b\xa7\x7f\xa7\x35\x9e\x46\x4c\x40\xc8\x94\x33\x4c\x14\x3a\x55\xa8\xc1\xac\xc8\x93\x05\xbb\x7d\x4c\x39\xd9\xd9\xe3\xac\x69\x61\x08\x8b\x0d\x70\xb6\xb0\x67\xc3\xdf\x4a\x3f\xc0\x47\xa6\x4d\x61\x06\xd6\x5a\x8f\x0a\x2e\xbd\x7b\x27\x0a\x13\xa2\x30\xb0\xfa\x28\x45\xc1\x62\x12\x61\x1f\x62\xa6\x88\x30\x4c\xf7\xea\x31\x20\x9f\x9f\xa6\x9c\x17\x2e\x3c\x5a\x8e\xa5\x99\x2a\xb4\xde\x52\xae\xa2\x32\x8e\x89\x08\x9f\x24\x1c\x40\xaf\x7a\xdc\x89\x5e\x95\x53\x5e\x46\xd7\xd6\xbe\x75\x75\x83\x27\x72\xfd\x59\x07\x4f\x92\x0c\xbc\x8c\x74\x10\x32\x55\xd1\x5e\x6c\x37\x4f\x89\x59\xf5\xa1\x97\x4b\x33\xa8\x6f\x68\xe1\xaa\xb4\x6a\x16\xc7\x30\x90\xe2\xa3\x01\x12\x86\xf0\xc1\xa3\x29\x99\x90\x88\x38\xeb\x85\x2f\xcc\xcb\x9c\x49\x41\xf8\x87\xbf\x03\x33\xf0\xc0\x38\x07\x4e\xe8\xda\x1f\x0e\x28\x8c\xda\x6c\x21\xa9\x7a\x56\x71\x7e\x28\xe9\x1a\x95\x96\x74\xbd\x65\x53\x46\x94\xdd\xd8\xf3\x0b\x4f\x6a\x2b\x0b\x10\x2e\xa3\x2d\xbb\xad\xba\xab\xb3\xc7\xb0\x94\xca\x9b\x14\x13\x91\xb3\x29\x7f\x04\x67\x8b\x5e\x6e\x3a\x3d\xa7\x5b\xed\xed\xc6\xc5\x8f\x9a\x65\x14\x87\x66\x44\x05\x9c\x2d\x76\x1c\x1c\x34\x97\x94\x4c\x63\xb6\x65\x5b\x75\x26\x68\xc9\xc1\x12\xd9\x34\xc4\xee\x24\x65\x23\x26\x4d\x15\x33\x1b\xeb\xb6\xf8\x68\xaa\x4e\x9e\x28\x96\x31\x8e\x11\x86\xb5\xa0\x0d\x80\x22\x6b\x5b\xde\xd7\xbb\x2f\xc3\xf9\x78\x32\x18\xce\xc7\xe7\xd7\xc3\x0a\x8c\x8b\x1e\xbf\x2b\x19\xd7\x03\xc8\x92\x21\x0f\x67\xb8\x6c\x86\x95\x6a\xf2\xcf\xce\x1a\x93\x6e\x93\xe7\xd4\xa6\xce\x13\x2b\x71\x1b\xe5\x5b\xd4\xdc\x8f\x66\xb7\x57\xc3\xdb\xf9\x60\x74\x73\xfe\xe5\x6a\x38\xff\x7a\x7f\xfd\x3c\x49\x3e\xcd\x5c\x93\xe4\x2b\x6e\x3a\x28\xab\x09\x30\xf0\x8b\x1b\x4b\x5c\xa0\x0d\x99\xb6\xc9\x71\xbe\xce\xe2\xc6\xb4\x4c\xbc\x4f\x34\xe4\xd9\x24\xfa\x66\x36\x9a\xdc\xcf\x6f\xee\xa6\xd3\xc9\xec\xf6\xdd\xc8\xd6\x8a\xc9\x6c\xae\xd3\x24\x91\xca\x1c\x46\xf8\x60\xf2\x6d\x7c\x35\x39\x1f\xcc\xa7\xb3\xc9\xed\xe4\x62\x72\xf5\x7e\x32\x97\x0f\x82\x4b\x12\xce\x13\x25\x8d\xa4\x92\x1f\xc6\xc0\xd5\xe4\xf2\x6a\x78\x3f\x7c\x3f\xba\xb9\x8c\x38\x66\x78\x20\xb9\x17\xe7\x57\xa3\x8b\xc9\xfc\xe6\xee\xcb\x78\xf8\x7e\x86\x42\x09\x67\x54\x06\x3a\x5d\x08\x7c\xa1\xa1\x8c\xae\xcf\x2f\x87\xf3\xd9\xf0\x72\xf8\xe7\x74\x7e\x3b\x3b\x1f\xdf\x5c\x9d\xdf\x8e\x26\xe3\x77\xa3\xdd\xc5\xec\xb9\xc2\x08\x1f\x93\xb9\x51\x44\x68\xee\x92\xd6\x61\xf2\x9f\x9d\x7f\x9b\x0f\x86\xf7\xa3\x8b\xe1\xcd\xbb\x71\xa0\xc8\xc3\x3c\x44\x5b\xe5\xea\x03\x9d\x34\x0f\x89\x57\x93\xcb\xcb\xd1\xf8\xf2\xdd\xc3\x22\x97\x51\xc4\x44\x73\xc9\xbe\x16\x3f\xbd\x9b\x5f\x4f\x06\xef\xe8\xa1\x34\x49\x83\x58\x86\x87\xba\xa8\xb7\xf8\x8a\xa9\xdf\xcc\x07\xa3\x59\x93\xfa\x3e\xf4\xd0\xd0\x22\x69\xe7\x95\x45\x51\x55\xd3\x56\x45\x5d\x16\x34\xbe\x12\xd9\xbb\x1a\x3d\x86\x91\x00\x4a\x34\xc2\x83\x2d\xc8\xff\x83\xd4\x00\x97\x94\xf0\xb2\x08\x76\x08\x76\xf6\x81\x08\x63\x2b\x6f\xdb\xdd\x31\x03\x42\x1a\x90\xcb\x25\xa3\x8c\x70\xbe\x01\x92\x11\xc6\x5d\x07\x28\x05\xbe\x42\xb1\x9b\x33\xb2\x4f\x9d\x5b\x2d\x76\xf4\x46\xf7\x96\xba\x47\x23\x25\xd3\xa4\x55\xea\x34\x86\xeb\x5b\x6d\x8d\x14\xcb\x30\xe5\x35\x37\xf2\x1b\xdb\xe3\x0a\x49\x38\x11\x7c\xd3\x52\x76\x15\xd2\xf6\xb2\x2d\xac\xc6\xe0\x5e\x40\x6f\x5d\x6c\xb7\x4b\xfa\xef\xab\x21\xbb\x77\x37\x8d\x13\xb6\x18\x6d\x7b\xb7\xad\xe3\x9f\xd9\x1d\xd8\x02\x1f\x8d\xae\x98\xb6\x6d\xdb\xb8\x8c\x5c\x43\xc8\xca\x56\x6f\x85\x0a\x61\x81\x94\xb8\x6b\x0a\xb3\x42\xf5\xc0\x34\x96\xed\x9f\x13\x55\xa2\x64\x98\x52\x04\x54\x4a\xaa\x2a\x24\x67\x6b\x04\xb3\x62\x15\x03\x3c\x86\xbb\xfc\xea\x43\xda\x8e\x30\xc8\xef\x28\xe8\x8a\xa8\x10\x33\x58\x32\x8e\xf0\xd1\xcb\x40\x46\xbd\x2c\xd6\x3d\xb2\x0c\x7f\xfd\x65\xb1\x58\x04\x9f\xf1\xb7\x5f\x83\xb3\x33\xfc\x35\xf8\xed\x97\x7f\x9e\x05\xa7\x9f\xfe\xf1\xe9\x94\xd0\xd3\xd3\xd3\xd3\x4f\x3d\xca\x94\x92\x3a\xc8\xe2\xf9\xe9\x09\x97\xd1\xc7\x3e\x8c\x25\xe8\x94\xae\x3c\xa2\x54\x65\x1b\xbb\x69\x77\x18\xb1\x0e\xb6\xb7\x36\x15\x52\xda\x0d\x51\x2e\xcc\xe7\x77\xb7\x95\xf6\x92\x16\xe5\x90\x26\xc3\x7a\x0a\x13\xa8\xf5\x54\xc9\x05\x56\xb7\xe0\xe3\xd3\xa5\x99\xff\x6b\x85\x14\x4f\x62\x6f\xc1\x44\xaf\x12\x52\xfc\x68\x40\x1b\x03\x5a\x52\x62\x20\x80\xbb\xf1\xe8\xcf\x7e\xd3\x00\x7b\x55\x83\x0b\x94\x84\x7f\x59\xce\x7a\x22\xe5\xbc\x11\x8c\x3b\x5b\xff\x1f\x3d\x18\xef\x13\x65\xdf\x3f\x1c\x1d\xfb\x60\xea\xee\x75\xaa\x91\x1a\x88\xc2\xf2\x2e\x0d\x16\x1b\xd0\x69\x82\x2a\x66\xdb\x02\xd9\x8f\x16\xe4\xdf\xaf\xad\x2f\x70\xb7\xaa\xe6\x87\x0a\xde\x75\x94\x54\x3b\x1a\xac\x9b\xbb\xeb\x29\x25\xd0\xa0\x2e\x6f\xaa\xf2\x2b\xaa\x9e\x37\xdd\x9e\x5d\xd6\x3a\x68\x8f\x6b\xb0\x6e\xbe\xf3\x43\x7a\x89\x0c\xdb\x26\x63\x51\xed\x44\xe7\x75\xda\x3e\x92\x3e\x3c\x5e\x57\x57\x74\x54\x8a\x4d\x4a\xdd\x70\x60\x7f\x07\x95\x26\xa7\x9d\x00\x1c\x37\xcf\xd3\x52\x93\xc6\x71\x91\x5a\x97\x2e\x2b\x91\x48\x48\x6d\x18\x85\x24\x55\x89\xd4\xf8\x16\x59\x46\xa0\xd9\x79\x89\x59\xd8\x9d\x5b\x77\x80\x66\xfe\x4a\xf9\xc9\xf2\x99\x6b\xdf\xdd\x72\xee\x48\x48\x15\x0b\x7a\xbb\x7b\xea\x2c\xd6\x2f\x2d\xdb\x5f\x23\x98\xfd\x21\xb5\xb9\x95\x17\x8d\x8f\x4c\xdf\x1f\xce\x5e\xc7\x45\x5f\x37\x9c\x6c\xe7\xf5\x65\x09\x65\x5b\xe2\xdb\x9d\x32\xbd\x46\x2b\x5f\x73\x2c\x6a\xa5\xc2\xb6\x61\x60\x25\xb5\x01\x45\x1e\xc0\xdf\x4c\x00\xa1\x14\xb5\x2e\xed\xd1\x7d\xfb\xb3\xf8\x55\xc7\x6a\x53\xd8\xe4\x66\xe7\xc6\xee\xde\xaf\xa3\xf3\xdb\x89\xd2\x55\x21\x74\x89\x69\x27\x48\x2d\xfd\xb7\x2a\x82\x9d\x5b\xab\x55\x4f\xb3\x0e\x3a\x86\xdb\xc9\x60\xd2\x87\xd0\xd5\x5b\xb6\xc1\xa0\x32\xc4\xfc\x53\x08\xf8\x1c\xea\x2a\x46\x6b\x25\xae\xd1\x79\xda\xb8\x62\xda\xd7\x5d\x79\xb5\x04\x17\xb3\x91\xed\x73\x1e\x37\xc0\x84\x36\x84\xfb\x8c\x60\x8b\xca\xea\x81\x4c\x78\x55\xfa\x42\xad\xfc\xba\x7a\xb2\x0f\x2b\xbb\xbe\xc0\x6c\xf9\x88\xf3\x2c\x5e\x57\x94\xe8\x8a\x11\x7b\x01\x35\x9d\xbd\x2b\x04\x3c\x0f\x54\x89\x0a\xcd\xaf\x4a\x3b\x37\x7f\x47\x55\xb3\x67\x4d\xb3\x97\x10\x3a\x23\xd2\xd6\x78\xb4\x0f\x64\x53\x31\xb5\x8f\x59\xfb\xc8\xb3\x2c\x66\xaa\xf1\xb4\x2b\x0e\xef\x05\xb6\x53\xcb\x2f\x01\xeb\x2a\x64\x77\x95\xb1\x7b\x51\xd7\x21\xf6\x46\x0d\xb6\x17\x5d\xf5\x42\xa7\xbb\x48\x0a\x9e\x6e\x40\xfb\xdb\x52\x6c\xe0\x0b\xc5\xce\x1a\x71\x77\x25\xd9\x7c\xa7\xa3\x16\x84\x9e\x90\xd4\xac\xa4\x62\xff\x73\x6b\x4e\xd6\x9f\xf5\x09\x93\xbd\xec\x6c\x81\x86\x14\x2f\x78\xf2\x27\x2c\x33\xc9\xf1\x0b\x13\x21\x13\xd1\x8e\xa7\x3c\x4a\x72\xcc\xaf\x6e\x49\xc2\x2e\x6d\x50\xdf\x71\xd2\x11\x40\xeb\x8c\x16\xa4\x4e\x17\xb6\xd3\xd6\xfd\xa3\x20\x5f\x7d\x53\x7b\x33\xb2\xff\x73\x22\x2b\x81\xf6\x79\x2f\x93\xc9\x01\xaf\x98\x94\xcd\x4a\x76\x7d\x50\xca\x24\xcf\xcd\x01\x7c\xf8\xe0\x7e\x28\xd4\x32\x55\x14\xcb\xf1\xf2\xfd\x8c\xce\x07\xdc\x2b\x17\xf7\x3b\x43\xb5\x78\x5a\xe7\x2e\xb3\xf2\xff\x44\x68\x5e\x43\xcb\x1d\x3c\x96\xe4\x04\xb6\x88\x46\x55\xf0\xd4\xe0\x28\xe7\xa7\xc6\x4d\x83\x97\x92\x7a\x4f\xae\xfd\x97\x33\xed\x7f\x3c\x10\x43\x57\x6f\xc4\x41\xe1\x3e\xa9\x46\x65\x67\xbe\x9b\x91\xc0\xf6\x20\xca\x07\x93\x06\x53\x6f\xea\x69\x45\xfa\xb1\x06\x11\x2c\xf2\x65\xaf\xe8\x76\x2d\x55\x57\xfd\xef\x25\xe0\x97\x79\x45\xe7\x61\xbd\x2f\xf4\xbd\x19\xbf\x6d\x28\x8a\x9f\x94\xfc\x06\xf2\xd9\x66\x48\x7f\x91\x30\x15\x50\x15\x6e\x37\x7a\x92\x30\x7c\x34\x28\xdc\xab\xb4\x1c\xb3\xcb\x11\x52\x6d\x64\x5c\x0c\x86\xe8\x9e\xcf\xe5\xa9\xa8\xe2\x0b\x79\x70\x6a\x1f\x53\x74\xc3\xeb\xcf\xba\x03\x3d\x9f\x75\x79\x2c\x26\x49\xc2\x44\xa4\xab\x13\xa5\x85\x16\x33\x95\x23\xcb\x58\xf2\xe6\x7e\x58\x93\xe7\xeb\x9b\x97\x85\x7d\x5d\x93\x6a\x3c\xd3\xe9\x04\x3c\x20\xbb\xfd\x3f\x00\x00\xff\xff\x01\xb8\xb7\x74\xff\x2b\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11263, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

