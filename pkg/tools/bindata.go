// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\x38\xf6\x7f\xcf\xa7\x38\x68\x80\x7f\x67\x80\xbf\xe2\xa4\xd8\xd9\x76\x8c\xdd\x87\x34\xf6\x64\x8d\x26\xb6\xe1\x5c\x3a\x6f\x06\x4d\x1d\xcb\x5c\x53\xa4\x96\xa4\x94\x78\x3f\xfd\x82\xa4\x24\xeb\x66\xc7\x49\x93\xa0\x93\x97\xba\x24\xcf\x8f\xe7\xc6\x73\xa1\x18\x04\xc1\x11\x49\xd8\x3d\x2a\xcd\xa4\xe8\x03\x49\x12\xdd\xcb\xce\x8e\xd6\x4c\x84\x7d\x18\x10\x8c\xa5\xb8\x41\x73\x14\xa3\x21\x21\x31\xa4\x7f\x04\x20\x48\x8c\x7d\xc8\x98\x32\x1c\x4d\xfe\x7f\x9d\x10\x8a\x7d\x58\xa7\x0b\x0c\xf4\x46\x1b\x8c\x8f\x74\x82\xd4\x2e\xd7\xc8\x91\x1a\xa9\xec\x6f\x80\x98\x18\xba\xba\x22\x0b\xe4\xda\x0f\x00\xa8\x54\x18\x56\x87\x34\x18\x27\x9c\x18\xcc\x69\x2a\x9b\xdb\xbf\x26\x03\xf6\x8f\xd7\x20\x3b\x41\x01\x0a\x96\xec\xdf\x4a\x6a\x33\x46\xf3\x20\xd5\xba\x0f\x46\xa5\x98\x8f\x87\x42\x4f\x25\x67\x74\xd3\x87\x0b\x9e\x6a\x83\xea\x0f\xa6\xb4\xf9\xce\xcc\xea\x5f\x9e\x24\x5f\x78\xec\x20\xa6\xa3\x01\x30\xed\x00\xc0\x48\xf8\xe5\xec\x57\x40\x41\x16\x1c\xe1\xfe\x5a\xdb\x11\x9d\xaa\x8c\x65\x58\xf0\x01\x54\x0a\x43\x98\x40\x05\x0a\xb5\x21\x6a\x0b\xf7\x8b\x91\xb0\x40\xa0\x2b\xa4\x6b\x0c\x7f\x05\x22\x42\xf8\xe5\xd3\xaf\x16\x24\x87\x34\x2b\x84\x54\x23\xc8\x25\x08\x8d\xc2\xa0\x02\x26\x80\x09\x56\x81\xad\x88\x37\x1d\x0d\x6a\xa2\x1d\xc3\x42\x4a\xa3\x8d\x22\x09\x24\x4a\x52\x0c\x53\x85\x20\x10\x43\xc7\x29\x55\x48\x0c\x02\xb1\x58\x4b\x16\xc5\x24\xb1\xe8\x15\x93\x6e\x2d\x9d\x03\x6a\x54\x19\xa3\x78\x4e\xa9\x4c\x85\x19\xd7\xcc\x52\xee\x29\x05\xdf\x58\x73\xc0\x7d\xae\x81\x44\x86\x1a\xa4\x70\xd2\x08\x19\xa2\x86\x07\x66\x56\x80\x8f\x46\x91\x99\x37\xdb\x3f\x0b\x6d\x39\xb3\xe6\x50\x64\xb9\xb4\xa2\x6e\xb6\x46\xb6\xd4\xe7\xad\x51\x00\x85\xff\x49\x99\xc2\x70\x90\x2a\x26\xa2\x1b\xba\xc2\x30\xe5\x4c\x44\xa3\x48\xc8\x72\x78\xf8\x88\x34\x35\xd6\xeb\x2b\x94\x1e\xf3\x26\x77\xd9\x5b\x54\xb1\xae\x4f\x07\xde\x83\x87\x8f\x89\x42\x6d\xcf\x4c\x63\xde\xae\x58\xe3\xa6\x5f\x13\xa7\xb1\x02\x40\x26\xa8\x88\x3d\x13\x30\x12\xad\xc9\x8c\xf0\x14\x5b\xb0\x16\xb8\xa1\x5b\x2b\xf7\x45\x61\xf7\x92\xe0\x18\x6e\x57\xd8\x70\x0a\xa0\x32\x61\xa8\x0b\x80\x8f\x1a\x96\x1c\x1f\x33\xc9\xd3\x18\x21\x54\x2c\x2b\xfd\xe6\xd8\x7a\x82\xb5\x4c\x88\x4b\x92\x72\xe3\xec\xef\xac\xc6\xd3\x88\x09\x08\x99\x72\x8e\x89\x42\xa7\x0a\x35\x98\x15\xd9\x7a\xb0\xa3\x63\xca\xe9\xce\x6e\x67\x5d\x0b\x43\x58\x6c\x80\xb3\x85\xdd\x1b\xfe\xaf\x3c\x07\xf8\xc8\xb4\x29\xdc\xc0\x7a\xeb\x51\x21\xa5\x3f\xde\x89\xc2\x84\x28\x0c\xac\x3d\x4a\x55\xb0\x98\x44\xd8\x87\x98\x29\x22\x0c\xd3\xbd\x7a\x0c\xc8\xe7\xa7\x29\xe7\xc5\x11\x1e\x2d\xc7\xd2\x4c\x15\xda\xd3\x52\xae\xa2\x32\x8e\x89\x08\xb7\x1a\x0e\xa0\x57\xdd\xee\x44\xaf\xca\x29\xaf\xa3\x6b\xeb\xdf\xba\x4a\xe0\x99\x5c\x7f\xd1\xc1\x56\x93\x81\xd7\x91\x0e\x42\xa6\x2a\xd6\x8b\x2d\xf1\x94\x98\x55\x1f\x7a\xb9\x36\x83\x3a\x41\x0b\x57\xa5\x55\xb7\x38\x86\x81\x14\x1f\x0d\x90\x30\x84\x0f\x1e\x4d\xc9\x84\x44\xc4\x79\x2f\x7c\x65\x5e\xe7\x4c\x0a\xc2\x3f\xfc\x3f\x30\x03\x0f\x8c\x73\xe0\x84\xae\xfd\xe6\x80\xc2\xa8\xcd\x0e\x96\xaa\x7b\x15\xfb\x87\x92\xae\x51\x69\x49\xd7\x3b\x88\x32\xa2\x2c\x61\xcf\x2f\x3c\xa9\xad\x2c\x40\xb8\x8c\x76\x50\x5b\x73\x57\x67\x8f\x61\x29\x95\x77\x29\x26\x22\xe7\x53\x7e\x0b\xce\x16\xbd\xdc\x75\x7a\xce\xb6\xda\xfb\x8d\x8b\x1f\x35\xcf\x28\x36\xcd\x88\x0a\x38\x5b\xec\xd9\x38\x68\x2e\x29\x85\xc6\x6c\x07\x59\xd7\x4c\xd5\x02\x36\x31\xdc\xca\x8b\x46\x08\x76\xc1\xa2\xa1\x33\x2b\x50\xd3\x69\xbb\x13\x9a\x8d\xae\x34\x55\xcc\x6c\x2c\x2e\x3e\x9a\x6a\x40\x48\x14\xcb\x18\xc7\x08\xc3\x5a\x80\x07\x40\x91\xb5\xbd\xf4\xdb\xdd\xd7\xe1\x7c\x3c\x19\x0c\xe7\xe3\xf3\xeb\x61\x05\xc6\x45\x9a\x3f\x94\x8c\xeb\xc1\x66\xc9\x90\x87\x33\x5c\x36\x43\x50\xb5\x50\xc8\xce\x1a\x93\x8e\xc8\x4b\x6a\xd3\xec\x89\xb5\x8e\xcd\x08\x2d\x6e\xee\x47\xb3\xdb\xab\xe1\xed\x7c\x30\xba\x39\xff\x7a\x35\x9c\x7f\xbb\xbf\x7e\x9a\x25\x9f\x92\xae\x49\xf2\x0d\x37\x1d\x9c\xd5\x14\x18\xf8\xc5\x8d\x25\x2e\x28\x87\x4c\xdb\x44\x3a\x5f\x67\x71\x63\x5a\x26\xfe\xfc\x34\xf4\xd9\x64\xfa\x66\x36\x9a\xdc\xcf\x6f\xee\xa6\xd3\xc9\xec\xf6\xdd\xd8\xd6\x8a\xc9\x6c\xae\xd3\x24\x91\xca\xbc\x8c\xf1\xc1\xe4\xfb\xf8\x6a\x72\x3e\x98\x4f\x67\x93\xdb\xc9\xc5\xe4\xea\xfd\x74\x2e\x1f\x04\x97\x24\x9c\x27\x4a\x1a\x49\x25\x7f\x99\x00\x57\x93\xcb\xab\xe1\xfd\xf0\xfd\xf8\xe6\x32\xe2\x98\xe1\x0b\xd9\xbd\x38\xbf\x1a\x5d\x4c\xe6\x37\x77\x5f\xc7\xc3\xf7\x73\x14\x4a\x38\xa3\x32\xd0\xe9\x42\xe0\x33\x1d\x65\x74\x7d\x7e\x39\x9c\xcf\x86\x97\xc3\x3f\xa7\xf3\xdb\xd9\xf9\xf8\xe6\xea\xfc\x76\x34\x19\xbf\x1b\xef\x2e\xbe\xcf\x15\x46\xf8\x98\xcc\x8d\x22\x42\x73\x17\x5e\x5f\xa6\xff\xd9\xf9\xf7\xf9\x60\x78\x3f\xba\x18\xde\xbc\x9b\x04\x8a\x3c\xcc\x43\xb4\x15\xb1\x7e\xe1\x21\xcd\x43\xe2\xd5\xe4\xf2\x72\x34\xbe\x7c\xf7\xb0\xc8\x65\x14\x31\xd1\x5c\x72\xa8\xc7\x4f\xef\xe6\xd7\x93\xc1\x3b\x9e\x50\x9a\xa4\x41\x2c\xc3\xe7\x1e\x51\x9b\x0e\x9d\x8b\x4c\x26\x56\xe5\xb3\x77\xe3\x37\x2f\xfe\xe6\x4a\x4a\x33\xaf\xd7\x88\xcf\xd0\xb3\x3f\xa8\x95\x13\x7a\xd3\x25\x44\x1f\x7a\x68\x68\x51\x6b\xe4\xc5\x53\xd1\x38\xd0\x56\xd3\x50\xd6\x6c\xbe\xd8\x3a\xb8\xe0\x3e\x86\x91\x00\x4a\x34\xc2\x83\xed\x39\xfe\x8d\xd4\x00\x97\x94\xf0\xb2\xce\x77\x08\x76\xf6\x81\x08\x63\x9b\x0b\xdb\xc0\x32\x03\x42\x1a\x90\xcb\x25\xa3\x8c\x70\xbe\x01\x92\x11\xc6\x5d\x93\x2b\x05\xbe\x42\x3d\x9f\x0b\x72\x48\x29\x5f\xad\xd1\xf4\x46\xf7\x96\xba\x47\x23\x25\xd3\xa4\x55\xa1\x35\x86\xeb\xa4\xb6\xb4\x8b\x65\x98\xf2\xda\xe9\xf7\x84\xed\x71\x85\x24\x9c\x08\xbe\x69\x19\xbb\x0a\x69\xdb\xf5\x16\x56\x63\xf0\x20\xa0\xb7\xee\x27\xda\x5d\xcb\x8f\x95\xbe\xdd\xd4\x4d\xe7\x84\x1d\x4e\xdb\xa6\xb6\xad\xca\x13\xd4\x81\xed\x61\xd0\xe8\x8a\x6b\xdb\xce\x94\xcb\xc8\xf5\xbc\xac\xec\x66\x57\xa8\x10\x16\x48\x89\xbb\x89\x31\x2b\x54\x0f\x4c\x63\xd9\xe1\x3a\x55\x25\x4a\x86\x29\x45\x40\xa5\xa4\xaa\x42\x72\xb6\x46\x30\x2b\x56\x71\xc0\x63\xb8\xcb\x6f\x77\xa4\x6d\x7a\x83\xfc\x1a\x86\xae\x88\x0a\x31\x83\x25\xe3\x08\x1f\xbd\x0e\x64\xd4\xcb\x62\xdd\x23\xcb\xf0\xf3\x6f\x8b\xc5\x22\xf8\x82\xbf\x7f\x0e\xce\xce\xf0\x73\xf0\xfb\x6f\x7f\x3f\x0b\x4e\x3f\xfd\xed\xd3\x29\xa1\xa7\xa7\xa7\xa7\x9f\x7a\x94\x29\x25\x75\x90\xc5\xf3\xd3\x13\x2e\xa3\x8f\x7d\x18\x4b\xd0\x29\x5d\x79\x44\xa9\xca\x4e\x7d\xd3\x6e\xa2\x62\x1d\xec\xee\xde\x2a\xac\xb4\x7b\xbe\x5c\x99\x4f\x53\xb7\x8d\xf6\x56\x5d\xd8\x4b\xfa\x28\x7b\xaa\x98\x40\xad\xa7\x4a\x2e\xb0\x4a\x82\x8f\xdb\x3b\x44\xff\xd7\x0a\x3f\x5e\x9c\xde\x82\x89\x5e\x25\xfc\xf8\xd1\x80\x36\x06\xb4\xa4\xc4\x40\x00\x77\xe3\xd1\x9f\xfd\xa6\xb3\xf6\xaa\xce\x19\x28\x09\xff\xb0\x5a\xe8\x89\x94\xf3\x46\xe0\xee\xbc\x09\xf9\xd9\x03\xf7\x21\x11\xf9\xfd\x43\xd7\xb1\x0f\xbc\xee\x9a\xab\x1a\xd5\x81\x28\x2c\xaf\x16\x61\xb1\x01\x9d\x26\xa8\x62\xb6\x2b\xe8\xfd\x6c\x09\xe1\xe7\xbc\xe5\xe8\xda\xa9\x66\xc6\x9f\x2a\x29\xd4\x51\x52\xed\x78\xb0\x21\xc1\xdd\xec\x29\x81\x06\x75\x79\xc9\x97\xdf\xee\xf5\xbc\x9b\xf7\xec\xb2\xd6\x46\x07\xdc\x20\x76\xcb\x9d\x6f\xd2\x4b\x64\xd8\x76\x2f\x8b\x6a\x27\x3a\x6f\x22\x0f\xd1\xf4\xcb\xf3\x40\x75\x45\x47\x05\xda\xe4\xd4\x0d\x07\xf6\x77\x50\xe9\xf9\xda\x89\xc5\x49\xf3\x34\x2f\x35\x6d\x1c\x17\x29\x7b\xe9\xb2\x1d\x89\x84\xd4\x86\x51\x48\x52\x95\x48\x8d\x6f\x91\xbd\x04\x9a\xbd\xf7\xbf\x85\xdf\xb9\x75\x2f\xb0\xcc\x5f\x29\x97\x59\x39\x73\xeb\xbb\x0b\xe2\x3d\xc9\xab\xe2\x41\x6f\x77\xc5\x9f\xc5\xfa\xb9\xed\xc0\x6b\x04\xb3\xe7\x85\xcd\xc3\xc3\xd9\xeb\x1c\xd1\xd7\x0d\x27\xbb\x65\x7d\xbb\xe4\xb3\x2b\xa1\xee\x4f\xc5\xde\xfa\x95\x8f\x66\x96\x83\x4a\x95\x6f\x43\xc6\x4a\x6a\x03\x8a\x3c\x80\xbf\xd4\x01\x42\x29\x6a\x5d\xfa\xae\xfb\xc4\x6a\xf1\xab\x87\xb0\x2d\x4d\x53\xf2\xbd\x84\xdd\xfd\x67\x47\xf7\xb9\x17\xa5\xab\xf2\xe8\x52\xd3\x5e\x90\x5a\x59\xd1\xaa\x34\xf6\x92\x56\xab\xa9\x66\x7d\x75\x0c\xb7\x93\xc1\xa4\x0f\xa1\xab\xe3\x6c\x93\x43\x65\x88\xf9\x17\x27\xf0\xf9\xd6\x55\xa2\xd6\xee\xae\xd9\xda\x12\xae\x98\xf6\xf5\x5c\x5e\x85\xc1\xc5\x6c\x64\x7b\xad\xc7\x0d\x30\xa1\x0d\xe1\x3e\x7b\xd8\x62\xb5\xba\x21\x13\xde\x94\xbe\x00\x2c\x3f\x62\x9f\x1c\x22\xca\xbe\x0f\x5d\x3b\xbe\x95\x3d\x89\xd7\x15\x51\xba\xe2\xc9\x41\x40\xcd\xc0\xd0\x15\x2e\x9e\x06\xaa\x44\x90\xe6\xc7\xbb\xbd\xc4\x3f\x50\x01\x1d\x58\xff\x1c\xa4\x84\xce\xe8\xb5\x33\x76\x1d\x02\xd9\x34\x4c\xed\x9b\xe1\x21\xfa\x2c\x0b\x9f\x6a\xec\xed\x8a\xd9\x07\x81\xed\xb5\xf2\x73\xc0\xba\x8a\xde\x7d\x25\xef\x41\xdc\x75\xa8\xbd\x51\xaf\x1d\xc4\x57\xbd\x28\xea\x2e\xa8\x82\xed\x65\x6c\x7f\x57\x3a\x0e\x7c\x51\xd9\x59\x4f\xee\xaf\x3a\x9b\xcf\xa1\xd4\x82\xd0\x13\x92\x9a\x95\x54\xec\xbf\x6e\xcd\xc9\xfa\x8b\x3e\x61\xb2\x97\x9d\x2d\xd0\x90\xe2\xa1\x54\xfe\x52\x68\x26\x39\x7e\x65\x22\x64\x22\xda\xf3\x62\x4a\x49\x8e\xf9\x2d\x32\x49\xd8\xa5\x0d\xea\x7b\x76\x3a\x02\x68\xed\xd1\x82\xd4\xe9\xc2\x76\xf0\xba\x7f\x14\xe4\xab\x6f\x6a\x4f\x73\x0e\x7f\xb5\x65\x35\xd0\xde\xef\x79\x3a\x79\xc1\x63\x31\x65\xb3\x92\x5d\x1f\x94\x3a\xc9\x73\x73\x00\x1f\x3e\xb8\x1f\x0a\xb5\x4c\x15\xc5\x72\xbc\x7c\xa6\xa4\xf3\x01\xf7\x98\xc8\xfd\xce\x50\x2d\xb6\xeb\xdc\x85\x5a\xfe\x9f\x08\xcd\x6b\x58\xb9\x43\xc6\x92\x9d\xc0\x16\xdc\xa8\x0a\x99\x1a\x12\xe5\xf2\xd4\xa4\x69\xc8\x52\x72\xef\xd9\xb5\xff\x72\xa6\xfd\x8f\x07\x62\xe8\xea\x8d\x24\x28\x8e\x4f\xaa\x51\xd9\x99\x1f\x16\x24\xb0\xfd\x8a\xf2\xc1\xa4\x21\xd4\x9b\x9e\xb4\x22\xfd\x58\x87\x08\x16\xf9\xb2\x57\x3c\x76\x2d\x53\x57\xcf\xdf\x73\xc0\x2f\xf3\x8a\xce\xc3\xfa\xb3\xd0\xf7\x6e\xfc\xb6\xa1\x28\xde\x1a\xf9\x0d\xf4\xb3\xcb\x91\xfe\x22\x61\x2a\xa0\x2a\xdc\xed\xf4\x24\x61\xf8\x68\x50\xb8\xc7\x7f\x39\x66\xd7\x41\x48\xb5\x91\x71\x31\x18\xa2\x7b\xa5\x98\xa7\xa2\xca\x59\xc8\x83\x53\x7b\x9b\xa2\x73\x5e\x7f\xd1\x1d\xe8\xf9\xac\xcb\x63\x31\x49\x12\x26\x22\x5d\x9d\x28\x3d\xb4\x98\xa9\x6c\x59\xc6\x92\x37\x3f\x87\x35\x7d\xbe\xbe\x7b\x59\xd8\xd7\x75\xa9\xc6\x0b\xa7\x4e\xc0\x17\x64\xb7\xff\x05\x00\x00\xff\xff\xde\xcf\xa6\xd1\x66\x2d\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11622, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
