// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5d\x73\xe2\x3a\xd2\xbe\xcf\xaf\xe8\x3a\xa9\x7a\x67\xe6\xc2\x71\x32\xf5\x9e\x9d\x39\xd4\xee\x05\x13\x38\x59\x6a\x12\xa0\x20\x93\x39\x77\x94\x2c\x37\x46\x8b\x2c\x79\x25\xd9\x09\xfb\xeb\xb7\x24\x1b\xe3\x2f\x08\xf9\xac\x1d\xae\xc0\x52\x3f\xea\x2f\x75\x3f\x12\xf6\x3c\xef\x84\x24\xec\x0e\x95\x66\x52\xf4\x00\x1f\x0c\x0a\xfb\x55\xfb\xd9\x45\x80\x86\x5c\x9c\xac\x99\x08\x7b\x30\x20\x18\x4b\x31\x47\x73\x12\xa3\x21\x21\x31\xa4\x77\x02\x20\x48\x8c\x3d\xc8\x98\x32\x1c\x4d\xf1\x5b\x27\x84\x62\x0f\xd6\x69\x80\x9e\xde\x68\x83\xf1\x89\x4e\x90\xda\xe9\x06\xe3\x84\x13\x83\xf6\x3b\x40\x15\xc8\x7e\x9a\x60\xf6\xc3\x49\x80\x5c\x6f\x67\x00\xa8\x54\x18\xd6\x9c\xb6\x85\xb7\x9f\x95\xd4\x66\x8c\xe6\x5e\xaa\x75\x0f\x8c\x4a\xb1\x78\x1e\x0a\x3d\x95\x9c\xd1\x4d\x0f\x2e\x79\xaa\x0d\xaa\x3f\x99\xd2\xe6\x27\x33\xab\x7f\xe6\x22\xc5\xc4\x53\x07\x31\x1d\x0d\x80\x69\x07\x00\x46\xc2\xc7\x8b\x4f\x80\x82\x04\x1c\xe1\xee\x46\xdb\x27\x3a\x55\x19\xcb\x70\xab\x07\x50\x29\x0c\x61\x02\x15\x28\xd4\x86\xa8\x1d\xdc\x47\x23\x21\x40\xa0\x2b\xa4\x6b\x0c\x3f\x01\x11\x21\x7c\xfc\xfc\xc9\x82\x14\x90\x66\x85\x90\x6a\x04\xb9\x04\xa1\x51\x18\x54\xc0\x04\x30\xc1\x2a\xb0\x15\xf3\xa6\xa3\x41\xcd\xb4\x53\x08\xa4\x34\xda\x28\x92\x40\xa2\x24\xc5\x30\x55\x08\x02\x31\x74\x9a\x52\x85\xc4\x20\x10\x8b\xb5\x64\x51\x4c\x12\x8b\x5e\x09\xcf\x2e\x6a\x05\xa0\x46\x95\x31\x8a\x7d\x4a\x65\x2a\xcc\xb8\x16\x96\x72\x4d\x29\xf8\xc6\x86\x03\xee\x0a\x0f\x24\x32\xd4\x20\x85\xb3\x46\xc8\x10\x35\xdc\x33\xb3\xb2\x19\xa5\xc8\x2c\x0f\xdb\x3f\xb6\xde\x72\x61\x2d\xa0\xc8\x72\x69\x4d\xdd\xec\x82\x6c\xa5\xfb\xad\xa7\x00\x0a\xff\x9d\x32\x85\xe1\x20\x55\x4c\x44\x73\xba\xc2\x30\xe5\x4c\x44\xa3\x48\xc8\xf2\xf1\xf0\x01\x69\x6a\x6c\x32\x57\x24\x73\xcc\x39\x72\xa4\x46\xaa\x5b\x54\xb1\xae\x0f\x7b\x10\x13\x43\x57\xc3\x87\x44\xa1\x76\xf9\x5f\x1f\xb7\x33\xd6\xb8\xe9\xd5\xcc\x69\xcc\x00\x90\x09\x2a\x62\xa4\xea\xc1\x48\xb4\x06\x33\xc2\x53\x6c\xc1\x5a\xe0\x86\x6f\xad\xdd\x97\xdb\xb8\x97\x02\xa7\x70\xbb\xc2\x46\x52\x00\x95\x09\x43\xbd\x05\xf8\xa0\x61\xc9\xf1\x21\x93\x3c\x8d\x11\x42\xc5\xb2\x32\x6f\x4e\x6d\x26\xd8\xc8\x84\xb8\x24\x29\x37\x2e\xfe\x2e\x6a\x3c\x8d\x98\x80\x90\x29\x97\x98\x28\x74\xaa\x50\x83\x59\x91\x5d\x06\x3b\x39\xa6\x9c\xef\xec\x72\x36\xb5\x30\x84\x60\x03\x9c\x05\x76\x6d\xf8\xbf\x72\x1f\xe0\x03\xd3\x66\x9b\x06\x36\x5b\x4f\xb6\x56\xe6\xdb\x3b\x51\x98\x10\x85\x9e\x8d\x47\xe9\x0a\x16\x93\x08\x7b\x10\x33\x45\x84\x61\xda\xaf\xd7\x80\x62\x7c\x9a\x72\xbe\xdd\xc2\xa3\xe5\x58\x9a\xa9\x42\xbb\x5b\xca\x59\x54\xc6\x31\x11\xe1\xce\xc3\x1e\xf8\xd5\xe5\xce\xf4\xaa\x1c\xca\x7d\x74\x63\xf3\x5b\x57\x05\x72\x25\xd7\x5f\xb5\xb7\xf3\xa4\x97\xfb\x48\x7b\x21\x53\x95\xe8\xc5\x56\x78\x4a\xcc\xaa\x07\x7e\xe1\x4d\xaf\x2e\xd0\xc2\x55\xa9\x68\x01\x28\x99\x90\x88\xb8\x84\x85\x6f\x2c\x77\x33\x93\x82\xf0\x3d\x4b\x55\x31\xb6\xb8\xa1\xa4\x6b\x54\x5a\xd2\xf5\x1e\xa1\x8c\x28\x2b\xe8\xe7\x13\xcf\x6a\x33\xb7\x20\x5c\x46\x7b\xa4\x6d\x18\xab\xa3\xa7\xb0\x94\x2a\x4f\x15\x26\x22\x97\x2b\xf9\x12\x9c\x05\x7e\x91\x12\xbe\x8b\x99\xce\xf3\xc1\xd5\x85\x5a\xc4\xb7\x8b\x66\x44\x79\x9c\x05\x07\x16\xf6\x9a\x53\x4a\xa3\x31\xdb\x23\x56\x1d\xf1\x5a\x7e\xb0\x4a\x36\x13\xac\xbb\xf9\xd8\x4a\x48\x53\xc5\xcc\xc6\x6e\x47\x7c\x30\xd5\xcd\x9b\x28\x96\x31\x8e\x11\x86\xb5\x62\x0c\x80\x22\x6b\x67\xd4\xf7\x1f\xdf\x86\x8b\xf1\x64\x30\x5c\x8c\xfb\x37\xc3\x0a\x8c\xab\x0a\x7f\x2a\x19\xd7\x0b\xc3\x92\x21\x0f\x67\xb8\x6c\x96\x8b\x6a\xaf\xce\x2e\x1a\x83\x4e\x28\xb7\xd4\xb6\xc4\x33\xeb\x71\x5b\xbd\x5b\xda\xdc\x8d\x66\xb7\xd7\xc3\xdb\xc5\x60\x34\xef\x7f\xbb\x1e\x2e\xbe\xdf\xdd\x3c\xae\x52\xde\x3e\x6e\x48\xf2\x1d\x37\x1d\x9a\xd5\x1c\xe8\xe5\x93\x1b\x53\x5c\x01\x0d\x99\xb6\x4d\x6f\xb1\xce\xe2\xc6\xb0\x4c\xf2\xc4\x6f\xf8\xb3\xa9\xf4\x7c\x36\x9a\xdc\x2d\xe6\x3f\xa6\xd3\xc9\xec\xf6\xdd\xd4\xd6\x8a\xc9\x6c\xa1\xd3\x24\x91\xca\x3c\x4f\xf1\xc1\xe4\xe7\xf8\x7a\xd2\x1f\x2c\xa6\xb3\xc9\xed\xe4\x72\x72\xfd\x7e\x3e\x97\xf7\x82\x4b\x12\x2e\x12\x25\x8d\xa4\x92\x3f\xcf\x80\xeb\xc9\xd5\xf5\xf0\x6e\xf8\x7e\x7a\x73\x19\x71\xcc\xf0\x99\xea\x5e\xf6\xaf\x47\x97\x93\xc5\xfc\xc7\xb7\xf1\xf0\xfd\x12\x85\x12\xce\xa8\xf4\x74\x1a\x08\x7c\x62\xa2\x8c\x6e\xfa\x57\xc3\xc5\x6c\x78\x35\xfc\x6b\xba\xb8\x9d\xf5\xc7\xf3\xeb\xfe\xed\x68\x32\x7e\x37\xdd\x5d\xcd\x5e\x28\x8c\xf0\x21\x59\x18\x45\x84\xe6\xae\x33\x3d\xcf\xff\xb3\xfe\xcf\xc5\x60\x78\x37\xba\x1c\xce\xdf\xcd\x02\x45\xee\x17\x21\x5a\xf6\xaa\x9f\xb9\x49\x8b\x92\x78\x3d\xb9\xba\x1a\x8d\xaf\xde\xbd\x2c\x72\x19\x45\x4c\x34\xa7\x1c\xa9\x7c\x9e\x40\x95\xcc\x99\x2f\x06\xa3\x59\xd3\x86\x1e\xf8\x68\xe8\xb6\x07\x16\x8d\x7a\x4b\x3e\x69\x8b\x78\x96\xfc\x20\x6f\xec\x47\x93\xb6\x53\x18\x09\xa0\x44\x23\xdc\x5b\xde\xfa\x2f\xa4\x06\xb8\xa4\x84\x97\x5c\xd1\x21\xd8\xd1\x7b\x22\x8c\x25\xa8\xf6\x10\xc4\x0c\x08\x69\x40\x2e\x97\x8c\x32\xc2\xf9\x06\x48\x46\x18\x77\x07\x25\x29\xf0\x15\x38\x61\x61\xc8\x31\x74\xb0\xca\x1d\xf4\x46\xfb\x4b\xed\xd3\x48\xc9\x34\x69\x31\x87\xc6\xe3\xba\xa8\xa5\x1c\xb1\x0c\x53\x5e\xcb\xca\x5c\xb0\xfd\x5c\x21\x09\x27\x82\x6f\x5a\xc1\xae\x42\xda\x23\x5f\x0b\xab\xf1\xf0\x28\xa0\x3a\x27\x7d\x09\x4f\x7d\x19\xd5\xea\x96\x6e\x26\x1d\xec\x49\xc6\xb6\xb4\xa5\xbb\x8f\x48\x7b\x96\x07\xa3\xd1\x95\x94\xb5\xa7\x16\x2e\x23\x77\x1e\x62\xe5\x49\x67\x85\x0a\x21\x40\x4a\xdc\x29\xdd\xac\x50\xdd\x33\x8d\xe5\xe9\xe7\x9e\x71\x6e\x4f\xde\x61\x4a\x11\x50\x29\xa9\xaa\x90\x9c\xad\xed\x11\x9f\x55\x12\xeb\x14\x7e\x14\x27\x7f\x69\x0f\x44\x5e\x71\x44\xa7\x2b\xa2\x42\xcc\x60\xc9\x38\xc2\x87\xdc\x07\x32\xf2\xb3\x58\xfb\x64\x19\x7e\xf9\x3d\x08\x02\xef\x2b\xfe\xf1\xc5\xbb\xb8\xc0\x2f\xde\x1f\xbf\xff\xed\xc2\x3b\xff\xfc\xff\x9f\xcf\x09\x3d\x3f\x3f\x3f\xff\xec\x53\xa6\x94\xd4\x5e\x16\x2f\xce\xcf\xb8\x8c\x3e\xf4\x60\x2c\x41\xa7\x74\x95\x23\x4a\x55\x9e\xe2\x36\x6d\x22\x1e\x6b\x6f\xff\x09\xa0\xa2\x4a\xfb\xdc\x50\x38\xf3\x71\xe9\x76\xd0\x9e\xc2\xe4\x9f\xc3\xc5\xed\x0e\x60\x02\xb5\x9e\x2a\x19\x60\x55\x04\x1f\x76\x77\x46\xf9\xa7\x55\x2a\x72\x15\xfd\x80\x09\xbf\x52\x2a\xf2\xa7\x1e\x6d\x3c\xd0\x92\x12\x03\x1e\xfc\x18\x8f\xfe\xea\x35\x13\xd0\xaf\x26\x9c\xa7\x24\xfc\xdd\x5a\xe6\x8b\x94\xf3\x46\x91\xed\x3c\xf9\xfe\xaf\x17\xd9\x63\xaa\xe7\xeb\x95\x99\xd3\xbc\xf8\xb9\xeb\x8a\x6a\x65\x05\xa2\xb0\xbc\x22\x82\x60\x03\x3a\x4d\x50\xc5\x4c\xfc\x82\x45\xf9\x57\x2c\x9e\x75\x94\x54\x3b\x1d\xec\x36\x73\xb7\x23\x4a\xa0\x41\x5d\x5e\x94\x14\x37\x24\x7e\x9e\x3a\xbe\x9d\xd6\x5a\xe8\x88\x5b\x98\x6e\xbb\x8b\x45\xfc\x44\x86\xed\xd0\x5a\x54\x3b\xd0\x79\x9b\x73\x4c\x93\x7b\x7e\xbd\xac\xce\xe8\x60\x60\x4d\x4d\xdd\x63\xcf\x7e\xf7\x2a\x5c\xbc\x5d\x80\x9d\x35\x8f\xeb\x52\xf3\xc6\xaf\x54\x4c\x6d\x32\x16\xae\x72\x37\x57\x07\xaa\x67\xc5\xdd\x6f\x77\xa7\x98\xc5\xfa\xa9\xdc\xf1\xbd\xf7\xf3\x4b\x7b\xfa\xb1\x77\x6b\xfb\xaa\xe5\xe1\x3a\x9b\x7b\xac\x72\xb3\x6d\x51\x2b\x74\x6b\x29\x95\xbb\x3a\xb6\xa7\x39\xc8\x4f\x73\x40\x28\x45\xad\xcb\x78\xbb\xff\x41\x2c\x7e\x35\x71\xdb\x1a\x36\xad\x39\x28\xd8\x4d\xf0\x3b\xe8\xfd\x41\x94\xae\xb6\xd2\xe5\xa6\x83\x20\xb5\x9e\xd1\x6a\x23\x07\x45\xab\x4d\xb5\xd9\x66\x4f\xe1\x76\x32\x98\xf4\x20\x94\xe2\x83\x01\xcb\x36\xa9\x0c\xb1\xb8\x3e\x86\xbc\xa0\x3b\xfa\x60\x0b\x8d\x63\xbd\x3b\xc1\x15\xd3\x39\xd1\x2d\x5a\x2c\x5c\xce\x46\x96\xf4\x3e\x6c\x80\x09\x6d\x08\xcf\xcb\x93\x65\x18\xd5\x05\x99\xc8\x43\xe9\x32\x62\xf7\x4f\xd3\xd9\x31\xa6\x1c\xba\xb5\xde\x73\xf1\xfd\x28\x5e\xd7\x2e\xec\xda\x83\x47\x01\x35\x37\x5e\xd7\x76\x7c\x1c\xa8\xb2\x43\x9b\x37\xf1\x07\x85\x5f\xd0\x62\x8f\x6c\xb0\x47\x39\xa1\xb3\xdb\xee\xed\xb5\xc7\x40\x36\x03\x53\xfb\x03\xe0\x18\x7f\x96\x9d\xb5\x5a\xdb\xba\x6a\xe2\x51\x60\x07\xa3\xfc\x14\xb0\x2e\x56\x75\x88\x53\x1d\xa5\x5d\x87\xdb\x1b\x84\xe0\x28\xbd\x04\x1a\xd1\xc4\x71\xcf\x6a\xb1\x2b\x2f\xbb\x7a\xfb\x5a\x98\x97\xb3\x96\x4e\xc2\x72\x98\xd6\x34\x5f\x45\x50\x01\xa1\x67\x24\x35\x2b\xa9\xd8\x7f\xdc\x9c\xb3\xf5\x57\x7d\xc6\x64\xe3\xcd\x84\xe2\xef\xfc\x99\xe4\xf8\x8d\x89\x90\x89\xe8\xc0\x2b\x0a\x4a\x72\x2c\x6e\xe9\x48\xc2\xae\x6c\x51\x3f\xb0\xd2\x09\x40\x6b\x8d\x16\xa4\x4e\x03\x7b\xec\xd2\xbd\x13\xaf\x98\x3d\xaf\xfd\x7f\x7e\xfc\x6b\x12\xd6\x03\xed\xf5\x9e\xe6\x93\x67\xbc\x9d\xa1\x6c\x57\xb2\xf3\xbd\xd2\x27\x95\xcb\xbf\xdf\x7e\x73\x5f\x15\x6a\x99\x2a\x8a\x95\x91\xf2\x7d\x82\x3c\xc2\x19\xaa\xa0\x3a\xea\xee\x34\x5e\x23\xaa\x1d\x36\x95\x4b\x7b\x96\x94\xa2\xda\xda\xd0\xb0\xa0\xd0\xbe\xa6\x7b\x43\xef\x52\x6b\x0f\x22\xe7\x24\x0f\x38\xd3\xf9\x97\x7b\x62\xe8\xea\x8d\x2c\xd8\x6e\x97\x54\xa3\xb2\x23\x2f\x36\xc4\xb3\x9c\x5e\xe5\xc5\xa3\x61\xd4\x9b\xee\xac\x6d\xbb\x11\x32\x44\x2f\x28\xa6\xbd\xe2\x36\x6b\x85\xba\xba\xdf\x9e\x02\x7e\x55\x30\xb8\x1c\x36\xcf\xfd\x9e\x7b\x51\xe5\x8d\x4b\x4f\xbc\x0b\xf2\x1b\xf8\x67\x5f\x22\xfd\x22\x65\xc9\xa3\x2a\x7c\xac\x02\x91\x84\xed\xde\x4b\x2b\x90\xf7\x57\xa5\x54\x1b\x19\x6f\x07\x42\x74\xaf\x11\x95\x6d\xa8\xbb\x48\xed\x5b\x78\x7b\xea\x5c\x7f\xd5\x7b\xd7\x2b\xe6\xb8\xae\x16\x93\x24\x61\x22\xea\x5c\xaa\xa8\x2a\xf9\x8f\x37\xdf\x95\x35\xef\xbe\x7e\xb2\x59\xd8\xd7\x4d\xb0\xc6\x8b\x0d\x9d\x80\xcf\xe8\x6d\xff\x0d\x00\x00\xff\xff\x89\x01\x83\x3e\xe0\x28\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10464, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

