// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x53\xe3\x38\x16\x7e\xe7\x57\x9c\x1a\xaa\xb6\xa7\x1f\x8c\xa1\x6b\x67\xbb\x27\xb5\xfb\x40\x93\x0c\x9b\x6a\x48\x52\xe1\xd2\xf3\x96\x92\xe5\x13\x47\x1b\x59\xf2\x4a\xb2\x21\xfb\xeb\xb7\x24\x5f\xe2\x5b\x42\xa0\x81\x9a\xce\x0b\x41\xd2\xf9\x74\xee\xe7\x48\x91\xe7\x79\x47\x24\x61\xf7\xa8\x34\x93\x62\x00\x24\x49\xb4\x9f\x9d\x1d\xad\x99\x08\x07\x30\x24\x18\x4b\x71\x83\xe6\x28\x46\x43\x42\x62\xc8\xe0\x08\x40\x90\x18\x07\x90\x31\x65\x38\x9a\xe2\x7f\x9d\x10\x8a\x03\x58\xa7\x01\x7a\x7a\xa3\x0d\xc6\x47\x3a\x41\x6a\x97\x6b\xe4\x48\x8d\x54\xf6\x3b\x40\x4c\x0c\x5d\x5d\x91\x00\xb9\xce\x07\x00\x54\x2a\x0c\x6b\x42\x1a\x8c\x13\x4e\x0c\x16\x34\xb5\xcd\xed\xa7\xcd\x80\xfd\xf0\x06\x64\x2f\x28\x40\xc9\x92\xfd\xac\xa4\x36\x13\x34\x0f\x52\xad\x07\x60\x54\x8a\xc5\x78\x28\xf4\x4c\x72\x46\x37\x03\xb8\xe0\xa9\x36\xa8\xfe\x60\x4a\x9b\xef\xcc\xac\xfe\x9d\x93\x14\x0b\x8f\x1d\xc4\x6c\x3c\x04\xa6\x1d\x00\x18\x09\xbf\x9e\x7d\x04\x14\x24\xe0\x08\xf7\xd7\xda\x8e\xe8\x54\x65\x2c\xc3\x92\x0f\xa0\x52\x18\xc2\x04\x2a\x50\xa8\x0d\x51\x5b\xb8\x5f\x8d\x84\x00\x81\xae\x90\xae\x31\xfc\x08\x44\x84\xf0\xeb\xa7\x8f\x16\xa4\x80\x34\x2b\x84\x54\x23\xc8\x25\x08\x8d\xc2\xa0\x02\x26\x80\x09\x56\x83\xad\x89\x37\x1b\x0f\x1b\xa2\x1d\x43\x20\xa5\xd1\x46\x91\x04\x12\x25\x29\x86\xa9\x42\x10\x88\xa1\xe3\x94\x2a\x24\x06\x81\x58\xac\x25\x8b\x62\x92\x58\xf4\x9a\x49\xb7\x96\x2e\x00\x35\xaa\x8c\x51\x3c\xa7\x54\xa6\xc2\x4c\x1a\x66\xa9\xf6\x94\x82\x6f\xac\x39\xe0\xbe\xd0\x40\x22\x43\x0d\x52\x38\x69\x84\x0c\x51\xc3\x03\x33\x2b\xc0\x47\xa3\xc8\x3c\x37\xdb\xbf\x4a\x6d\x39\xb3\x16\x50\x64\xb9\xb4\xa2\x6e\xb6\x46\xb6\xd4\xe7\x9d\x51\x00\x85\xff\x4d\x99\xc2\x70\x98\x2a\x26\xa2\x1b\xba\xc2\x30\xe5\x4c\x44\xe3\x48\xc8\x6a\x78\xf4\x88\x34\x35\xd6\xeb\x6b\x94\x39\xe6\x4d\xe1\xb2\xb7\xa8\x62\xdd\x9c\xf6\x72\x0f\x1e\x3d\x26\x0a\xb5\x8d\x99\xd6\xbc\x5d\xb1\xc6\xcd\xa0\x21\x4e\x6b\x05\x80\x4c\x50\x11\x1b\x13\x30\x16\x9d\xc9\x8c\xf0\x14\x3b\xb0\x16\xb8\xa5\x5b\x2b\xf7\x45\x69\xf7\x8a\xe0\x18\x6e\x57\xd8\x72\x0a\xa0\x32\x61\xa8\x4b\x80\x0f\x1a\x96\x1c\x1f\x33\xc9\xd3\x18\x21\x54\x2c\xab\xfc\xe6\xd8\x7a\x82\xb5\x4c\x88\x4b\x92\x72\xe3\xec\xef\xac\xc6\xd3\x88\x09\x08\x99\x72\x8e\x89\x42\xa7\x0a\x35\x98\x15\xd9\x7a\xb0\xa3\x63\xca\xe9\xce\x6e\x67\x5d\x0b\x43\x08\x36\xc0\x59\x60\xf7\x86\xbf\x55\x71\x80\x8f\x4c\x9b\xd2\x0d\xac\xb7\x1e\x95\x52\xe6\xe1\x9d\x28\x4c\x88\x42\xcf\xda\xa3\x52\x05\x8b\x49\x84\x03\x88\x99\x22\xc2\x30\xed\x37\x73\x40\x31\x3f\x4b\x39\x2f\x43\x78\xbc\x9c\x48\x33\x53\x68\xa3\xa5\x5a\x45\x65\x1c\x13\x11\x6e\x35\xec\x81\x5f\xdf\xee\x44\xaf\xaa\xa9\x5c\x47\xd7\xd6\xbf\x75\x9d\x20\x67\x72\xfd\x45\x7b\x5b\x4d\x7a\xb9\x8e\xb4\x17\x32\x55\xb3\x5e\x6c\x89\x67\xc4\xac\x06\xe0\x17\xda\xf4\x9a\x04\x1d\x5c\x95\x8a\x0e\x80\x92\x09\x89\x88\x73\x58\xf8\xca\x72\x35\x33\x29\x08\xdf\xb1\x55\x1d\xa3\xc4\x0d\x25\x5d\xa3\xd2\x92\xae\x77\x10\x65\x44\x59\x42\x3f\x5f\x78\xd2\x58\x59\x82\x70\x19\xed\xa0\xb6\x66\xac\xcf\x1e\xc3\x52\xaa\xdc\x55\x98\x88\x9c\xaf\xe4\x5b\x70\x16\xf8\x85\x4b\xf8\xce\x66\x3a\xf7\x07\x97\x17\x1a\x16\x2f\x37\xcd\x88\xf2\x38\x0b\xf6\x6c\xec\xb5\x97\x54\x42\x63\xb6\x83\xac\x3e\xe3\x75\xf4\x60\x99\x6c\x3b\x58\x7f\xf1\xb1\x99\x90\xa6\x8a\x99\x8d\x0d\x47\x7c\x34\xf5\xe0\x4d\x14\xcb\x18\xc7\x08\xc3\x46\x32\x06\x40\x91\x75\x3d\xea\xdb\xdd\xd7\xd1\x62\x32\x1d\x8e\x16\x93\xf3\xeb\x51\x0d\xc6\x65\x85\x3f\x94\x8c\x9b\x89\x61\xc9\x90\x87\x73\x5c\xb6\xd3\x45\xbd\xa8\x67\x67\xad\x49\x47\x94\x4b\x6a\x4b\xe2\x89\xd5\xb8\xcd\xde\x1d\x6e\xee\xc7\xf3\xdb\xab\xd1\xed\x62\x38\xbe\x39\xff\x7a\x35\x5a\x7c\xbb\xbf\x7e\x9a\xa5\xbc\x7c\x5c\x93\xe4\x1b\x6e\x7a\x38\x6b\x28\xd0\xcb\x17\xb7\x96\xb8\x04\x1a\x32\x6d\x8b\xde\x62\x9d\xc5\xad\x69\x99\xe4\x8e\xdf\xd2\x67\x9b\xe9\x9b\xf9\x78\x7a\xbf\xb8\xb9\x9b\xcd\xa6\xf3\xdb\x77\x63\x5b\x2b\x26\xb3\x85\x4e\x93\x44\x2a\xf3\x32\xc6\x87\xd3\xef\x93\xab\xe9\xf9\x70\x31\x9b\x4f\x6f\xa7\x17\xd3\xab\xf7\xd3\xb9\x7c\x10\x5c\x92\x70\x91\x28\x69\x24\x95\xfc\x65\x02\x5c\x4d\x2f\xaf\x46\xf7\xa3\xf7\xe3\x9b\xcb\x88\x63\x86\x2f\x64\xf7\xe2\xfc\x6a\x7c\x31\x5d\xdc\xdc\x7d\x9d\x8c\xde\xcf\x51\x28\xe1\x8c\x4a\x4f\xa7\x81\xc0\x67\x3a\xca\xf8\xfa\xfc\x72\xb4\x98\x8f\x2e\x47\x7f\xce\x16\xb7\xf3\xf3\xc9\xcd\xd5\xf9\xed\x78\x3a\x79\x37\xde\x5d\xce\x5e\x28\x8c\xf0\x31\x59\x18\x45\x84\xe6\xae\x32\xbd\x4c\xff\xf3\xf3\xef\x8b\xe1\xe8\x7e\x7c\x31\xba\x79\x37\x09\x14\x79\x58\x84\x68\xbb\x57\xfd\xc2\x20\x2d\x52\xe2\xd5\xf4\xf2\x72\x3c\xb9\x7c\xf7\xb4\xc8\x65\x14\x31\xd1\x5e\x72\xa8\xc7\xcf\xee\x16\xd7\xd3\xe1\x3b\x46\x28\x4d\x52\x2f\x96\xe1\x4b\x43\x34\xf7\xf8\x9a\xab\xdf\x2c\x86\xe3\x79\x9b\xfb\x01\xf8\x68\x68\x59\xb4\x8b\xce\xa2\xec\x96\x69\xa7\x53\xae\x1a\x9a\xbc\x13\x39\xb8\xcb\x3c\x86\xb1\x00\x4a\x34\xc2\x83\x6d\xb4\xff\x83\xd4\x00\x97\x94\xf0\xaa\xb9\x75\x08\x76\xf6\x81\x08\x63\x3b\x6a\x7b\x6a\x63\x06\x84\x34\x20\x97\x4b\x46\x19\xe1\x7c\x03\x24\x23\x8c\xbb\x93\x9d\x14\xf8\x0a\x4d\x6c\x21\xc8\x21\xfd\x6b\xbd\xd9\xd1\x1b\xed\x2f\xb5\x4f\x23\x25\xd3\xa4\xd3\xea\xb4\x86\x9b\xa4\xb6\x47\x8a\x65\x98\xf2\x46\x18\xe5\x84\xdd\x71\x85\x24\x9c\x0a\xbe\xe9\x18\xbb\x0e\x69\xcf\xa8\x1d\xac\xd6\xe0\x41\x40\xcd\x26\xfa\x47\x1a\xeb\x1f\xeb\x0d\xfb\xa9\xdb\x4e\x07\x3b\x9c\xb1\x4b\x6d\xfb\xf3\x27\xa8\x3d\xdb\xb8\xa3\xd1\x35\x97\xb5\xc7\x2c\x2e\x23\x77\x80\x63\xd5\xd1\x6c\x85\x0a\x21\x40\x4a\xdc\xb5\x82\x59\xa1\x7a\x60\x1a\xab\xe3\xda\x03\xe3\x1c\x12\x25\xc3\x94\x22\xa0\x52\x52\xd5\x21\x39\x5b\x23\x98\x15\xab\x39\xd6\x31\xdc\x15\x57\x15\xd2\x9e\xe0\xbc\xe2\x4e\x81\xae\x88\x0a\x31\x83\x25\xe3\x08\x1f\x72\x1d\xc8\xc8\xcf\x62\xed\x93\x65\xf8\xf9\xb7\x20\x08\xbc\x2f\xf8\xfb\x67\xef\xec\x0c\x3f\x7b\xbf\xff\xf6\x8f\x33\xef\xf4\xd3\xdf\x3f\x9d\x12\x7a\x7a\x7a\x7a\xfa\xc9\xa7\x4c\x29\xa9\xbd\x2c\x5e\x9c\x9e\x70\x19\x7d\x18\xc0\x44\x82\x4e\xe9\x2a\x47\x94\xaa\x3a\x76\x6e\xba\x27\x87\x58\x7b\xbb\x8f\x2c\x35\x56\xba\x07\x9d\x42\x99\x4f\x53\x77\x8d\xf6\x9c\xa3\xc7\x4b\x0e\x0f\x36\x02\x98\x40\xad\x67\x4a\x06\x58\x27\xc1\xc7\xed\x25\x57\xfe\xe9\xa4\x8a\x9c\x45\x3f\x60\xc2\xaf\xa5\x8a\x7c\xd4\xa3\xad\x01\x2d\x29\x31\xe0\xc1\xdd\x64\xfc\xe7\xa0\xed\x80\x7e\xdd\xe1\x3c\x25\xe1\x9f\x56\x32\x5f\xa4\x9c\xb7\x92\x6c\xef\x51\xfd\xaf\x9e\x64\x0f\xc9\x9e\xaf\x97\x66\x8e\xf3\xe4\xe7\xee\x57\xea\x99\x15\x88\xc2\xea\x4e\x0b\x82\x0d\xe8\x34\x41\x15\x33\xf1\x93\x24\xe5\xf7\x3b\x86\xff\x15\x52\x6d\x13\x25\xd5\x8e\x07\x1b\x94\xee\xf2\x47\x09\x34\xa8\xab\x7b\xa0\xe2\x02\xc8\xcf\x1d\xcd\xb7\xcb\x3a\x1b\x1d\x70\xc9\xd4\x2f\x77\xb1\x89\x9f\xc8\xb0\xeb\x08\x16\xd5\x4e\xf4\x5e\x56\x1d\x52\x12\x5f\x9e\x5d\xeb\x2b\x7a\xfa\xb5\x36\xa7\x6e\xd8\xb3\xdf\xbd\xda\x51\xa3\x9b\xae\x9d\x34\x4f\xf3\xd2\xd0\xc6\x71\x59\x08\x97\xae\x86\x90\x48\x48\x6d\x18\x85\x24\x55\x89\xd4\xf8\x9a\x35\xe1\x67\xca\xf2\xd6\xef\x0b\xab\xb8\x3b\xc0\x3d\x69\xbd\x66\xd9\xb7\xbb\x9d\xcd\x62\xfd\xdc\xa6\xf6\xbd\x53\xc7\x8f\x36\x1b\x87\xa6\xc7\x5d\x69\x7c\x7f\x01\xc8\x35\x56\xfb\x8d\xc0\xa2\xd6\xfa\x40\xeb\xfe\x2b\xa9\x8d\x3d\x17\x43\x7e\x2e\x06\x42\x29\x6a\x5d\xd9\xdb\xfd\xa2\x64\xf1\xeb\x8e\xdb\xe5\xb0\x2d\xcd\x5e\xc2\xfe\x93\x47\xcf\xb9\x63\x2f\x4a\x5f\xbd\xeb\x53\xd3\x5e\x90\x46\x31\xeb\xd4\xb7\xbd\xa4\xf5\x6a\xdf\xae\xff\xc7\x70\x3b\x1d\x4e\x07\x10\x4a\xf1\xc1\x80\x6d\x83\xa9\x0c\xb1\xb8\x88\x87\xbc\x76\xb8\xbe\xc6\xe6\x34\xd7\x8e\x6f\x09\x57\x4c\xe7\x1d\x78\x51\xfb\xe1\x62\x3e\xb6\xdd\xf8\xe3\x06\x98\xd0\x86\xf0\x3c\x13\xda\xd6\xa7\xbe\x21\x13\xb9\x29\x9d\x47\x6c\x7f\xb3\x3b\x39\x44\x94\x7d\xf7\xff\x3b\x7e\x42\x78\x12\xaf\x2f\x0a\xfb\x62\xf0\x20\xa0\x76\xe0\xf5\x85\xe3\xd3\x40\xb5\x08\x6d\xff\xa6\xb1\x97\xf8\x07\xaa\xf9\x81\xb5\xfc\x20\x25\xf4\x16\xf6\x9d\x65\xfd\x10\xc8\xb6\x61\x1a\x3f\xa5\x1c\xa2\xcf\xaa\x88\xd7\x73\x5b\x5f\x4e\x3c\x08\x6c\xaf\x95\x9f\x03\xd6\xd7\xc0\xed\x6b\xdf\x0e\xe2\xae\x47\xed\xad\xde\xc3\xdb\x5e\x9b\x0d\x76\x55\x1e\x2f\xef\x6b\x7a\x5b\x9a\xfd\x8d\x4f\xfb\xd1\x86\x0a\x08\x3d\x21\xa9\x59\x49\xc5\xfe\xe7\xd6\x9c\xac\xbf\xe8\x13\x26\xfd\xec\x2c\x40\x43\xca\xe7\x1c\xc5\x7b\x86\xb9\xe4\xf8\x95\x89\x90\x89\x68\xcf\xbb\x0e\x25\x39\x16\xf7\x7d\x24\x61\x97\x36\x17\xef\xd9\xe9\x08\xa0\xb3\x47\x07\x52\xa7\x81\x3d\xc6\xe9\xc1\x91\x57\xac\xbe\x69\x3c\x20\x38\xfc\x6d\x89\xd5\x40\x77\xbf\xe7\xe9\xe4\x05\x4f\x5a\x94\x2d\x26\x76\xbd\x57\xe9\xa4\x28\xa9\x1e\xfc\xf2\x8b\xfb\xa2\x50\xcb\x54\x51\xac\xc6\xab\xc7\x14\xba\x18\x70\x4f\x1e\xdc\xf7\x0c\x55\xb0\x5d\xe7\x6e\x4a\x8a\x7f\x22\x34\xaf\x61\xe5\x1e\x19\x2b\x76\x3c\xdb\x5b\xa2\x2a\x65\x6a\x49\x54\xc8\xd3\x90\xa6\x25\x4b\xc5\x7d\xce\xae\xfd\xcb\x99\xce\xbf\x3c\x10\x43\x57\x6f\x24\x41\x19\x3e\xa9\x46\x65\x67\x7e\x58\x10\xcf\xb6\xe6\x2a\xcf\x01\x2d\xa1\xde\x34\xd2\xca\xaa\x61\x1d\xc2\x0b\x8a\x65\xaf\x18\x76\x1d\x53\xd7\xe3\xef\x39\xe0\x97\x45\x23\x96\xc3\xe6\xb1\x30\xc8\xdd\xf8\x6d\x53\x51\xbc\x35\xf2\x1b\xe8\x67\x97\x23\xfd\x24\x69\xca\xa3\x2a\xdc\xed\xf4\x24\x61\xf8\x68\x50\xb8\x27\x4a\x05\x66\x5f\x20\xa4\xda\xc8\xb8\x1c\x0c\xd1\xbd\xa5\x2a\x4a\x51\x2d\x16\x8a\xe4\xd4\xdd\xa6\x3c\x24\xae\xbf\xe8\x1e\xf4\x62\xd6\xd5\xb1\x98\x24\x09\x13\x91\xae\x4f\x54\x1e\x5a\xce\xd4\xb6\xac\x72\xc9\x9b\xc7\x61\x43\x9f\xaf\xef\x5e\x16\xf6\x75\x5d\xaa\xf5\xb6\xa3\x17\xf0\x05\xd5\xed\xff\x01\x00\x00\xff\xff\xf1\x5a\x5a\xd7\x0c\x2a\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10764, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

