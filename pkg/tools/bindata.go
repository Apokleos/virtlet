// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\x38\xf6\x7f\xcf\xa7\x38\x68\x80\x7f\x67\x80\xbf\xe2\xa4\xd8\xd9\x76\x8c\xdd\x87\x34\xf6\x64\x8d\x26\xb6\xe1\x5c\x3a\x6f\x06\x4d\x1d\xcb\x5c\x53\xa4\x96\xa4\x94\x78\x3f\xfd\x82\xa4\xa4\xe8\x66\xc7\x49\x13\xa3\x93\x97\xba\xbc\x1c\x9e\xfb\xf9\x1d\x8a\x41\x10\x1c\x91\x84\xdd\xa3\xd2\x4c\x8a\x3e\x90\x24\xd1\xbd\xec\xec\x68\xcd\x44\xd8\x87\x01\xc1\x58\x8a\x1b\x34\x47\x31\x1a\x12\x12\x43\xfa\x47\x00\x82\xc4\xd8\x87\x8c\x29\xc3\xd1\xe4\xff\xd7\x09\xa1\xd8\x87\x75\xba\xc0\x40\x6f\xb4\xc1\xf8\x48\x27\x48\xed\x72\x8d\x1c\xa9\x91\xca\xfe\x06\x88\x89\xa1\xab\x2b\xb2\x40\xae\xfd\x00\x80\x4a\x85\x61\x75\x92\x06\xe3\x84\x13\x83\xf9\x9e\xca\xe1\xf6\xaf\xc9\x80\xfd\xe3\x35\x92\x9d\x44\x01\x0a\x96\xec\xdf\x4a\x6a\x33\x46\xf3\x20\xd5\xba\x0f\x46\xa5\x98\x8f\x87\x42\x4f\x25\x67\x74\xd3\x87\x0b\x9e\x6a\x83\xea\x0f\xa6\xb4\xf9\xce\xcc\xea\x5f\x7e\x4b\xbe\xf0\xd8\x91\x98\x8e\x06\xc0\xb4\x23\x00\x46\xc2\x2f\x67\xbf\x02\x0a\xb2\xe0\x08\xf7\xd7\xda\x8e\xe8\x54\x65\x2c\xc3\x82\x0f\xa0\x52\x18\xc2\x04\x2a\x50\xa8\x0d\x51\x4f\xe4\x7e\x31\x12\x16\x08\x74\x85\x74\x8d\xe1\xaf\x40\x44\x08\xbf\x7c\xfa\xd5\x12\xc9\x49\x9a\x15\x42\xaa\x11\xe4\x12\x84\x46\x61\x50\x01\x13\xc0\x04\xab\x90\xad\x88\x37\x1d\x0d\x6a\xa2\x1d\xc3\x42\x4a\xa3\x8d\x22\x09\x24\x4a\x52\x0c\x53\x85\x20\x10\x43\xc7\x29\x55\x48\x0c\x02\xb1\xb4\x96\x2c\x8a\x49\x62\xa9\x57\x4c\xfa\x64\xe9\x9c\xa0\x46\x95\x31\x8a\xe7\x94\xca\x54\x98\x71\xcd\x2c\xe5\x99\x52\xf0\x8d\x35\x07\xdc\xe7\x1a\x48\x64\xa8\x41\x0a\x27\x8d\x90\x21\x6a\x78\x60\x66\x05\xf8\x68\x14\x99\x79\xb3\xfd\xb3\xd0\x96\x33\x6b\x4e\x8a\x2c\x97\x56\xd4\xcd\x93\x91\xed\xee\xf3\xd6\x28\x80\xc2\xff\xa4\x4c\x61\x38\x48\x15\x13\xd1\x0d\x5d\x61\x98\x72\x26\xa2\x51\x24\x64\x39\x3c\x7c\x44\x9a\x1a\xeb\xf5\x95\x9d\x9e\xe6\x4d\xee\xb2\xb7\xa8\x62\x5d\x9f\x0e\xbc\x07\x0f\x1f\x13\x85\xda\xc6\x4c\x63\xde\xae\x58\xe3\xa6\x5f\x13\xa7\xb1\x02\x40\x26\xa8\x88\x8d\x09\x18\x89\xd6\x64\x46\x78\x8a\x2d\xb2\x96\x70\x43\xb7\x56\xee\x8b\xc2\xee\xe5\x86\x63\xb8\x5d\x61\xc3\x29\x80\xca\x84\xa1\x2e\x08\x7c\xd4\xb0\xe4\xf8\x98\x49\x9e\xc6\x08\xa1\x62\x59\xe9\x37\xc7\xd6\x13\xac\x65\x42\x5c\x92\x94\x1b\x67\x7f\x67\x35\x9e\x46\x4c\x40\xc8\x94\x73\x4c\x14\x3a\x55\xa8\xc1\xac\xc8\x93\x07\xbb\x7d\x4c\x39\xdd\xd9\xe3\xac\x6b\x61\x08\x8b\x0d\x70\xb6\xb0\x67\xc3\xff\x95\x71\x80\x8f\x4c\x9b\xc2\x0d\xac\xb7\x1e\x15\x52\xfa\xf0\x4e\x14\x26\x44\x61\x60\xed\x51\xaa\x82\xc5\x24\xc2\x3e\xc4\x4c\x11\x61\x98\xee\xd5\x73\x40\x3e\x3f\x4d\x39\x2f\x42\x78\xb4\x1c\x4b\x33\x55\x68\xa3\xa5\x5c\x45\x65\x1c\x13\x11\x3e\x69\x38\x80\x5e\xf5\xb8\x13\xbd\x2a\xa7\xbc\x8e\xae\xad\x7f\xeb\xea\x06\xcf\xe4\xfa\x8b\x0e\x9e\x34\x19\x78\x1d\xe9\x20\x64\xaa\x62\xbd\xd8\x6e\x9e\x12\xb3\xea\x43\x2f\xd7\x66\x50\xdf\xd0\xa2\xab\xd2\xaa\x5b\x1c\xc3\x40\x8a\x8f\x06\x48\x18\xc2\x07\x4f\x4d\xc9\x84\x44\xc4\x79\x2f\x7c\x65\x5e\xe7\x4c\x0a\xc2\x3f\xfc\x3f\x30\x03\x0f\x8c\x73\xe0\x84\xae\xfd\xe1\x80\xc2\xa8\xcd\x16\x96\xaa\x67\x15\xe7\x87\x92\xae\x51\x69\x49\xd7\x5b\x36\x65\x44\xd9\x8d\x3d\xbf\xf0\xa4\xb6\xb2\x20\xc2\x65\xb4\x65\xb7\x35\x77\x75\xf6\x18\x96\x52\x79\x97\x62\x22\x72\x3e\xe5\x8f\xe0\x6c\xd1\xcb\x5d\xa7\xe7\x6c\xab\xbd\xdf\xb8\xfc\x51\xf3\x8c\xe2\xd0\x8c\xa8\x80\xb3\xc5\x8e\x83\x83\xe6\x92\x52\x68\xcc\xb6\x6c\xab\xce\x04\x2d\x3d\x58\x26\x9b\x8e\xd8\x5d\xa4\x6c\xc6\xa4\xa9\x62\x66\x63\xc3\x16\x1f\x4d\x35\xc8\x13\xc5\x32\xc6\x31\xc2\xb0\x96\xb4\x01\x50\x64\x6d\xcf\xfb\x76\xf7\x75\x38\x1f\x4f\x06\xc3\xf9\xf8\xfc\x7a\x58\x21\xe3\xb2\xc7\x1f\x4a\xc6\xf5\x04\xb2\x64\xc8\xc3\x19\x2e\x9b\x69\xa5\x5a\xfc\xb3\xb3\xc6\xa4\xdb\xe4\x25\xb5\xa5\xf3\xc4\x6a\xdc\x66\xf9\x16\x37\xf7\xa3\xd9\xed\xd5\xf0\x76\x3e\x18\xdd\x9c\x7f\xbd\x1a\xce\xbf\xdd\x5f\x3f\xcf\x92\x2f\x33\xd7\x24\xf9\x86\x9b\x0e\xce\x6a\x0a\x0c\xfc\xe2\xc6\x12\x97\x68\x43\xa6\x6d\x71\x9c\xaf\xb3\xb8\x31\x2d\x13\x1f\x13\x0d\x7d\x36\x99\xbe\x99\x8d\x26\xf7\xf3\x9b\xbb\xe9\x74\x32\xbb\x3d\x18\xdb\x5a\x31\x99\xcd\x75\x9a\x24\x52\x99\xd7\x31\x3e\x98\x7c\x1f\x5f\x4d\xce\x07\xf3\xe9\x6c\x72\x3b\xb9\x98\x5c\x1d\x4e\xe7\xf2\x41\x70\x49\xc2\x79\xa2\xa4\x91\x54\xf2\xd7\x09\x70\x35\xb9\xbc\x1a\xde\x0f\x0f\xc7\x37\x97\x11\xc7\x0c\x5f\xc9\xee\xc5\xf9\xd5\xe8\x62\x32\xbf\xb9\xfb\x3a\x1e\x1e\xce\x51\x28\xe1\x8c\xca\x40\xa7\x0b\x81\x2f\x74\x94\xd1\xf5\xf9\xe5\x70\x3e\x1b\x5e\x0e\xff\x9c\xce\x6f\x67\xe7\xe3\x9b\xab\xf3\xdb\xd1\x64\x7c\x30\xde\x5d\xce\x9e\x2b\x8c\xf0\x31\x99\x1b\x45\x84\xe6\xae\x68\xbd\x4e\xff\xb3\xf3\xef\xf3\xc1\xf0\x7e\x74\x31\xbc\x39\x98\x04\x8a\x3c\xcc\x43\xb4\x28\x57\xbf\x32\x48\xf3\x94\x78\x35\xb9\xbc\x1c\x8d\x2f\x0f\x9e\x16\xb9\x8c\x22\x26\x9a\x4b\xf6\xf5\xf8\xe9\xdd\xfc\x7a\x32\x38\x60\x84\xd2\x24\x0d\x62\x19\xbe\x36\x44\xbd\xc7\x57\x5c\xfd\x66\x3e\x18\xcd\x9a\xdc\xf7\xa1\x87\x86\x16\x45\x3b\x47\x16\x05\xaa\xa6\x2d\x44\x5d\x02\x1a\x8f\x44\xf6\x46\xa3\xc7\x30\x12\x40\x89\x46\x78\xb0\x80\xfc\xdf\x48\x0d\x70\x49\x09\x2f\x41\xb0\xa3\x60\x67\x1f\x88\x30\x16\x79\xdb\xee\x8e\x19\x10\xd2\x80\x5c\x2e\x19\x65\x84\xf3\x0d\x90\x8c\x30\xee\x3a\x40\x29\xf0\x0d\xc0\x6e\x2e\xc8\x3e\x38\xb7\x0a\x76\xf4\x46\xf7\x96\xba\x47\x23\x25\xd3\xa4\x05\x75\x1a\xc3\xf5\xad\x16\x23\xc5\x32\x4c\x79\x2d\x8c\xfc\xc6\xf6\xb8\x42\x12\x4e\x04\xdf\xb4\x8c\x5d\x25\x69\x7b\xd9\x16\xad\xc6\xe0\x5e\x84\xde\x1b\x6c\xb7\x21\xfd\x8f\x61\xc8\xee\xdd\x4d\xe7\x84\x2d\x4e\xdb\xde\x6d\x71\xfc\x33\xbb\x03\x0b\xf0\xd1\xe8\x8a\x6b\xdb\xb6\x8d\xcb\xc8\x35\x84\xac\x6c\xf5\x56\xa8\x10\x16\x48\x89\xbb\xa6\x30\x2b\x54\x0f\x4c\x63\xd9\xfe\x39\x55\x25\x4a\x86\x29\x45\x40\xa5\xa4\xaa\x92\xe4\x6c\x8d\x60\x56\xac\xe2\x80\xc7\x70\x97\x5f\x7d\x48\xdb\x11\x06\xf9\x1d\x05\x5d\x11\x15\x62\x06\x4b\xc6\x11\x3e\x7a\x1d\xc8\xa8\x97\xc5\xba\x47\x96\xe1\xe7\xdf\x16\x8b\x45\xf0\x05\x7f\xff\x1c\x9c\x9d\xe1\xe7\xe0\xf7\xdf\xfe\x7e\x16\x9c\x7e\xfa\xdb\xa7\x53\x42\x4f\x4f\x4f\x4f\x3f\xf5\x28\x53\x4a\xea\x20\x8b\xe7\xa7\x27\x5c\x46\x1f\xfb\x30\x96\xa0\x53\xba\xf2\x14\xa5\x2a\xdb\xd8\x4d\xbb\xc3\x88\x75\xb0\xbd\xb5\xa9\xb0\xd2\x6e\x88\x72\x65\x3e\xbf\xbb\x6d\xb4\x97\xb4\x28\xaf\x69\x32\x6c\xa4\x30\x81\x5a\x4f\x95\x5c\x60\x75\x0b\x3e\x3e\x5d\x9a\xf9\xbf\x56\x4a\xf1\x2c\xf6\x16\x4c\xf4\x2a\x29\xc5\x8f\x06\xb4\x31\xa0\x25\x25\x06\x02\xb8\x1b\x8f\xfe\xec\x37\x1d\xb0\x57\x75\xb8\x40\x49\xf8\x87\x95\xac\x27\x52\xce\x1b\xc9\xb8\xb3\xf5\xff\xd9\x93\xf1\x3e\x59\xf6\xf0\xe9\xe8\xd8\x27\x53\x77\xaf\x53\xcd\xd4\x40\x14\x96\x77\x69\xb0\xd8\x80\x4e\x13\x54\x31\xdb\x96\xc8\x7e\xb6\x24\x7f\xb8\xb6\xfe\x67\x48\xc9\x75\x2a\xa9\x76\x3c\xd8\xe0\x75\x97\x4e\x4a\xa0\x41\x5d\xde\x3f\xe5\x17\x4f\x3d\xef\x90\x3d\xbb\xac\x75\xd0\x1e\x97\x5b\xdd\x72\xe7\x87\xf4\x12\x19\xb6\x1d\xc1\x52\xb5\x13\x9d\x97\x64\x5b\x5d\xfb\x4d\xb2\x70\x75\x45\x07\xfe\x6b\x72\xea\x86\x03\xfb\x3b\xa8\xb4\x2e\xed\xb4\xee\xa4\x79\x9e\x97\x9a\x36\x8e\x8b\x82\xb9\x74\xb5\x86\x44\x42\x6a\xc3\x28\x24\xa9\x4a\xa4\xc6\xf7\xa8\x1d\x02\xcd\xce\xab\xc9\xc2\xef\xdc\xba\x57\x58\xe6\xaf\x54\x75\xac\x9c\xb9\xf5\xdd\xdd\xe5\x8e\x32\x53\xf1\xa0\xf7\xbb\x7d\xce\x62\xfd\x52\x30\x7e\xe8\x14\xf5\xa3\xe0\x67\xdf\x34\xbc\xad\x5c\xec\x2e\x34\x5e\x63\x95\x6f\x20\x96\x6a\x05\x97\xda\x30\x5b\x49\x6d\x6c\x3f\x0f\xbe\x9f\x07\x42\x29\x6a\x5d\xda\xdb\x7d\x31\xb3\xf4\xab\x8e\xdb\xe6\xb0\x29\xcd\xce\x8d\xdd\x1d\x53\x47\xbf\xb4\x93\x4a\x57\x5d\xed\x52\xd3\x4e\x22\xb5\xa2\xd9\xaa\xa3\x3b\xb7\x56\xb1\x42\x13\x3d\x1c\xc3\xed\x64\x30\xe9\x43\xe8\x50\x8a\x85\xe5\x54\x86\x98\x7f\x40\x00\x5f\xa3\x1c\xce\xb2\xd9\xc2\xb5\x07\x4f\x1b\x57\x4c\x7b\xb4\x92\x63\x0c\xb8\x98\x8d\x6c\x77\xf0\xb8\x01\x26\xb4\x21\xdc\x67\x5c\x0b\xc5\xaa\x07\x32\xe1\x4d\xe9\xe1\x4d\xf9\x4d\xf2\x64\x1f\x51\x76\x7d\xb7\xd8\xf2\xe9\xe3\x59\x7a\x5d\x51\xd8\x15\x83\x7b\x11\x6a\x06\x5e\x57\x38\x3e\x4f\xa8\x12\xa1\xcd\x6f\x31\x3b\x37\xff\x00\x6a\xd8\x13\x33\xec\xa5\x84\x4e\x00\xb1\x15\x3e\xec\x43\xb2\x69\x98\xda\x27\xa0\x7d\xf4\x59\x82\x85\x6a\x6e\xeb\xca\x89\x7b\x11\xdb\x69\xe5\x97\x10\xeb\x02\x8a\xbb\x60\xe2\x5e\xdc\x75\xa8\xbd\x81\x71\xf6\xe2\xab\x0e\x24\xba\x41\x48\xf0\x74\x6f\xd8\xdf\x56\xc2\x02\x0f\xc4\x3a\x31\xd8\x6e\xa4\xd6\x7c\xdd\xa2\x16\x84\x9e\x90\xd4\xac\xa4\x62\xff\x75\x6b\x4e\xd6\x5f\xf4\x09\x93\xbd\xec\x6c\x81\x86\x14\xef\x5e\xf2\x87\x1f\x33\xc9\xf1\x2b\x13\x21\x13\xd1\x8e\x07\x30\x4a\x72\xcc\x2f\x3c\x49\xc2\x2e\x6d\x52\xdf\x71\xd2\x11\x40\xeb\x8c\x16\x49\x9d\x2e\x6c\x7f\xaa\xfb\x47\x41\xbe\xfa\xa6\xf6\xd2\x62\xff\x47\x38\x56\x03\xed\xf3\x5e\xa6\x93\x57\xbc\xfd\x51\xb6\x2a\xd9\xf5\x41\xa9\x93\xbc\x36\x07\xf0\xe1\x83\xfb\xa1\x50\xcb\x54\x51\x2c\xc7\xcb\x57\x27\x3a\x1f\x70\x6f\x43\xdc\xef\x0c\xd5\xe2\x69\x9d\xbb\x02\xca\xff\x13\xa1\x79\x0b\x2b\x77\xc8\x58\xb2\x13\x58\x90\x8a\xaa\x90\xa9\x21\x51\x2e\x4f\x4d\x9a\x86\x2c\x25\xf7\x9e\x5d\xfb\x2f\x67\xda\xff\x78\x20\x86\xae\xde\x49\x82\x22\x7c\x52\x8d\xca\xce\xfc\xb0\x20\x81\xc5\xf8\xca\x27\x93\x86\x50\xef\x1a\x69\x45\xf9\xb1\x0e\x11\x2c\xf2\x65\x6f\x18\x76\x2d\x53\x57\xe3\xef\x25\xc4\x2f\x73\x44\xe7\xc9\xfa\x58\xe8\x7b\x37\x7e\xdf\x54\x14\x3f\x19\xf9\x1d\xf4\xb3\xcd\x91\xfe\x22\x69\x2a\xa0\x2a\xdc\xee\xf4\x24\x61\xf8\x68\x50\xb8\xb7\x5c\x39\xcd\xae\x40\x48\xb5\x91\x71\x31\x18\xa2\x7b\x74\x96\x97\xa2\x4a\x2c\xe4\xc9\xa9\x7d\x4c\xd1\x6d\xae\xbf\xe8\x0e\xea\xf9\xac\xab\x63\x31\x49\x12\x26\x22\x5d\x9d\x28\x3d\xb4\x98\xa9\x1c\x59\xe6\x92\x77\x8f\xc3\x9a\x3e\xdf\xde\xbd\x2c\xd9\xb7\x75\xa9\xc6\xe3\x96\x4e\x82\xaf\xa8\x6e\xff\x0b\x00\x00\xff\xff\xb6\xc9\xb3\x09\x35\x2b\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11061, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

