// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x73\xdb\xb8\x15\x7e\xf7\xaf\x38\x13\xcf\x34\xc9\x03\x2d\x3b\xd3\x6d\xb2\x9a\xf6\xc1\xb1\xb5\xae\x26\x8e\xa4\x91\x14\x67\xdf\x34\x20\x78\x44\x61\x05\x02\x2c\x00\xd2\x56\x7f\x7d\x07\xe0\x45\xbc\x49\x61\x1c\xdb\x6d\xa6\xeb\x27\x19\x97\x0f\xe7\x7e\x01\xe1\x79\xde\x09\x89\xd9\x1d\x2a\xcd\xa4\x18\x02\x3e\x18\x14\xf6\xa7\x1e\xa4\x17\x3e\x1a\x72\x71\xb2\x65\x22\x18\xc2\x35\xc1\x48\x8a\x05\x9a\x93\x08\x0d\x09\x88\x21\xc3\x13\x00\x41\x22\x1c\x42\xca\x94\xe1\x68\xf2\xff\x75\x4c\x28\x0e\x61\x9b\xf8\xe8\xe9\x9d\x36\x18\x9d\xe8\x18\xa9\x5d\x6e\x30\x8a\x39\x31\x68\x7f\x03\x54\x81\xec\x5f\x13\xcc\xfe\x71\xe2\x23\xd7\xc5\x0a\x00\x95\x08\xc3\x9a\xcb\x0a\x78\xfb\xb7\x91\xda\x4c\xd0\xdc\x4b\xb5\x1d\x82\x51\x09\xe6\xe3\x81\xd0\x33\xc9\x19\xdd\x0d\xe1\x8a\x27\xda\xa0\xfa\x8d\x29\x6d\xbe\x32\xb3\xf9\x67\xb6\x25\x5f\x78\xea\x20\x66\xe3\x6b\x60\xda\x01\x80\x91\xf0\xe6\xe2\x2d\xa0\x20\x3e\x47\xb8\xfb\xac\xed\x88\x4e\x54\xca\x52\x2c\xe8\x00\x2a\x85\x21\x4c\xa0\x02\x85\xda\x10\xb5\x87\x7b\x63\x24\xf8\x08\x74\x83\x74\x8b\xc1\x5b\x20\x22\x80\x37\xef\xde\x5a\x90\x1c\xd2\x6c\x10\x12\x8d\x20\xd7\x20\x34\x0a\x83\x0a\x98\x00\x26\x58\x05\xb6\xc2\xde\x6c\x7c\x5d\x63\xed\x14\x7c\x29\x8d\x36\x8a\xc4\x10\x2b\x49\x31\x48\x14\x82\x40\x0c\x1c\xa5\x54\x21\x31\x08\xc4\x62\xad\x59\x18\x91\xd8\xa2\x57\xd4\xb3\xd7\x5a\x0e\xa8\x51\xa5\x8c\xe2\x25\xa5\x32\x11\x66\x52\x53\x4b\x79\xa6\x14\x7c\x67\xd5\x01\x77\xb9\x04\x62\x19\x68\x90\xc2\x71\x23\x64\x80\x1a\xee\x99\xd9\x58\x8b\x52\x64\x9e\xa9\xed\x1f\x85\xb4\x9c\x5a\x73\x28\xb2\x5e\x5b\x56\x77\x7b\x25\xdb\xdd\x97\xad\x51\x00\x85\xff\x4a\x98\xc2\xe0\x3a\x51\x4c\x84\x0b\xba\xc1\x20\xe1\x4c\x84\xe3\x50\xc8\x72\x78\xf4\x80\x34\x31\xd6\x98\x2b\x3b\x33\xcc\x05\x72\xa4\x46\xaa\x25\xaa\x48\xd7\xa7\x3d\x88\x88\xa1\x9b\xd1\x43\xac\x50\x3b\xfb\xaf\xcf\xdb\x15\x5b\xdc\x0d\x6b\xec\x34\x56\x00\xc8\x18\x15\x31\x52\x0d\x61\x2c\x5a\x93\x29\xe1\x09\xb6\x60\x2d\x70\x43\xb6\x96\xef\xab\x42\xef\xe5\x86\x53\x58\x6e\xb0\x61\x14\x40\x65\xcc\x50\x17\x00\xaf\x35\xac\x39\x3e\xa4\x92\x27\x11\x42\xa0\x58\x5a\xda\xcd\xa9\xb5\x04\xab\x99\x00\xd7\x24\xe1\xc6\xe9\xdf\x69\x8d\x27\x21\x13\x10\x30\xe5\x0c\x13\x85\x4e\x14\x6a\x30\x1b\xb2\xb7\x60\xb7\x8f\x29\x27\x3b\x7b\x9c\x35\x2d\x0c\xc0\xdf\x01\x67\xbe\x3d\x1b\xfe\x52\xfa\x01\x3e\x30\x6d\x0a\x33\xb0\xd6\x7a\x52\x70\x99\xb9\x77\xac\x30\x26\x0a\x3d\xab\x8f\x52\x14\x2c\x22\x21\x0e\x21\x62\x8a\x08\xc3\xf4\xa0\x1e\x03\xf2\xf9\x59\xc2\x79\xe1\xc2\xe3\xf5\x44\x9a\x99\x42\xeb\x2d\xe5\x2a\x2a\xa3\x88\x88\x60\x2f\x61\x0f\x06\xd5\xe3\xce\xf4\xa6\x9c\xca\x64\xf4\xd9\xda\xb7\xae\x6e\xc8\x88\xdc\x7e\xd0\xde\x5e\x92\x5e\x26\x23\xed\x05\x4c\x55\xb4\x17\xd9\xcd\x33\x62\x36\x43\x18\xe4\xd2\xf4\xea\x1b\x5a\xb8\x2a\x11\x2d\x00\x25\x63\x12\x12\x67\xb0\xf0\x91\x65\x62\x66\x52\x10\x7e\xe0\xa8\x2a\x46\x81\x1b\x48\xba\x45\xa5\x25\xdd\x1e\xd8\x94\x12\x65\x37\x0e\xb2\x85\x67\xb5\x95\x05\x08\x97\xe1\x81\xdd\x56\x8d\xd5\xd9\x53\x58\x4b\x95\x99\x0a\x13\xa1\xb3\x95\xec\x08\xce\xfc\x41\x6e\x12\x03\xa7\x33\x9d\xd9\x83\x8b\x0b\x35\x8d\x17\x87\xa6\x44\x79\x9c\xf9\x47\x0e\xf6\x9a\x4b\x4a\xa6\x31\x3d\xb0\xad\x3a\xa3\x91\x26\x8a\x99\x9d\x75\x28\x7c\x30\x55\xf7\x8b\x15\x4b\x19\xc7\x10\x83\x5a\x38\x05\x40\x91\xb6\x6d\xe2\x6e\x3c\x5f\xde\x8e\x96\xab\xeb\xf1\xe2\xf2\xe3\xed\x68\xf5\xe9\xee\x73\x05\xcb\x39\xf7\x6f\x4a\x46\x75\xff\xce\x42\xee\x67\x12\x7f\xc2\xdd\x1c\xd7\x4d\xe7\xaf\x65\x3c\x2f\x5b\xdc\x58\xe2\x82\x4e\xc0\xb4\x4d\x14\xab\x6d\x1a\x35\xa6\x65\x9c\x19\x4b\xce\xc1\x49\x79\x6c\x23\x7a\x94\x4a\xce\xb4\xd3\xdb\xf3\x4e\x61\x2c\x80\x12\x8d\x70\x6f\x83\xcf\x1f\x48\x0d\x70\x49\x09\x2f\x1d\xde\x21\xd8\xd9\x7b\x22\x8c\x8d\x32\x36\x93\x31\x03\x42\x1a\x90\xeb\x35\xa3\x8c\x70\xbe\x03\x92\x12\xc6\x5d\xb6\x93\x02\x9f\xc0\xb1\x73\x46\xfa\xf8\x74\xd5\x34\xf4\x4e\x0f\xd6\x7a\x40\x43\x25\x93\xf8\xa4\xa9\x89\xc6\x70\x7d\xab\x35\xee\x48\x06\x09\x47\xdd\xda\xd8\x1e\x57\x48\x82\xa9\xe0\xbb\x86\x69\xd5\x21\x6d\xde\x6e\x61\x35\x06\x7b\x01\xd5\x03\xcb\x8f\x04\x1b\xaf\x15\x37\x2c\xdf\x4d\xb3\xe8\x2e\xd6\x0e\xed\x6e\x1a\x1d\x1c\x30\xc6\xf6\x6e\x1b\xb3\xbe\xb1\xdb\xb3\xc1\x0c\x8d\xae\x98\xac\x4d\x3d\x5c\x86\x2e\xa9\xb1\x32\x5d\x6d\x50\x21\xf8\x48\x89\x2b\xb5\xcc\x06\xd5\x3d\xd3\x58\xa6\xb0\x7b\xc6\xb9\x2d\x9f\x82\x84\x22\xa0\x52\x52\x55\x21\x39\xdb\xda\x3a\x8d\x55\x0c\xeb\x14\xbe\xe4\xe5\x9b\xb4\x59\xcd\xcb\xeb\x2c\xba\x21\x2a\xc0\x14\xd6\x8c\x23\xbc\xce\x64\x20\xc3\x41\x1a\xe9\x01\x59\x07\xef\x7f\xf1\x7d\xdf\xfb\x80\xbf\xbe\xf7\x2e\x2e\xf0\xbd\xf7\xeb\x2f\x7f\xbb\xf0\xce\xdf\xfd\xf5\xdd\x39\xa1\xe7\xe7\xe7\xe7\xef\x06\x94\x29\x25\xb5\x97\x46\xab\xf3\x33\x2e\xc3\xd7\x43\x98\xd8\x6a\x93\x6e\x32\x44\xa9\xca\x54\xbc\x6b\x47\xd3\x48\x7b\x87\xc3\x78\x85\x94\x76\xf0\xcf\x85\xf9\xed\xdd\x6d\xa5\xfd\x19\x8e\xcb\xbf\x46\x38\x2e\x86\xad\x0f\x33\x81\x5a\xcf\x94\xf4\xb1\x7a\x2c\x3e\xec\x5b\x97\x82\xc6\x46\xb0\xcb\xb8\x1e\xf8\x4c\x0c\x2a\xc1\x2e\x1b\xf5\x68\x63\x40\x4b\x4a\x0c\x78\xf0\x65\x32\xfe\x7d\xd8\x74\xa1\x41\xd5\x65\x3c\x25\xe1\xef\x56\x37\x03\x91\x70\xde\x48\x13\x9d\x05\xd8\xff\x7a\x9a\xe8\x13\xff\x9f\x2e\x50\x9e\x66\xe1\xdb\x55\xcd\xd5\xdc\x00\x44\x61\xd9\xa9\xd8\x1a\x59\x27\x31\xaa\x88\x89\x9f\x30\xad\xfc\x8c\xe1\xbf\x8e\x92\x68\x47\x83\x75\x33\x57\xa4\x2b\x81\x06\x75\x59\xaf\xe7\x85\xfa\x20\x33\x9d\x81\x5d\xd6\x3a\xa8\x47\x33\xd0\xcd\x77\x7e\xc8\xc0\x36\xc6\x9d\xa8\x76\xa2\xb3\xa9\xe8\x93\xa6\x1f\x1f\xf1\xab\x2b\xd0\xd0\x42\xbb\x79\xc5\xde\xa2\xd4\x0d\x7b\xf6\xb7\x67\x14\x11\x9a\x3b\xc2\xda\x29\xc4\x71\x73\x98\x96\xbd\xf4\x6b\x8b\xfe\x3f\x13\x42\x8b\xe8\xe9\xd7\xc9\xed\xf4\xf2\x7a\x35\x9b\x4f\x97\xd3\xab\xe9\xed\xcb\x91\x2e\xef\x05\x97\x24\x58\xc5\x4a\x1a\x49\x25\x7f\x1c\x03\xb7\xd3\x9b\xdb\xd1\xdd\xe8\xe5\xe8\xe6\x32\xe4\x98\xe2\x23\xc9\xbd\xba\xbc\x1d\x5f\x4d\x57\x8b\x2f\x1f\x27\xa3\xe5\x8b\xd1\x4c\x09\x67\x54\x7a\x3a\xf1\x45\x2d\x98\xf6\x20\x7c\xfc\xf9\xf2\x66\xb4\x9a\x8f\x6e\x46\xbf\xcf\x56\xcb\xf9\xe5\x64\x71\x7b\xb9\x1c\x4f\x27\x2f\x46\xbb\x8b\x02\x2b\x85\x21\x3e\xc4\xab\x4a\x1c\x78\xa4\xbd\xe7\x4e\x7a\x3b\xbd\xb9\x19\x4f\x6e\x5e\xdc\x51\xb9\x0c\x43\x26\x9a\x4b\x7a\x12\xbf\x98\x8f\xa7\x77\xab\xc5\x97\xd9\x6c\x3a\x7f\x39\xe3\xd1\x8a\xc9\x74\xa5\x93\x38\x96\xea\x3b\x8d\xa7\x20\x7c\x7e\xf9\x75\x75\x3d\xba\x1b\x5f\x8d\x16\x2f\x46\xb6\x22\xf7\xab\x00\x53\x46\x6b\x99\xa5\x07\xd1\x99\xc5\x57\x4c\x7d\xb1\xba\x1e\xcf\x9b\x74\x1f\x4f\x61\x05\xd6\xa7\x2f\x1f\x47\xf3\xc9\x68\x39\x5a\xac\x66\xd3\x6b\x6b\x75\x2d\x01\x0c\xe1\x55\x23\x45\xbd\xfa\xaf\x97\xef\xb6\xfc\xc9\x39\x73\x57\x76\x47\xea\xf5\x4a\x82\x7f\xbe\xcb\xd4\x34\xd2\xdf\x7b\xdf\xf2\xd2\x15\xe4\x8f\xf6\xc1\xfd\xba\x58\xef\x60\x7d\x7e\xbc\xb2\xcf\x24\x56\xb9\xd2\xb7\xa8\x95\x2b\x8a\xb5\x54\xee\xce\xdc\x7a\x0d\x64\x5e\x03\x84\x52\xd4\xba\xd4\xb7\xfb\x00\x64\xf1\xab\x85\x52\x9b\xc2\x26\x37\x47\x37\x76\x5f\x8a\x75\x5c\x89\x1d\x45\xe9\x6a\x64\xba\xc4\x74\x14\xa4\xd6\xa5\xb4\x1a\x97\xa3\x5b\xab\x6d\x5c\xb3\xb1\x3b\x85\xe5\xf4\x7a\x6a\xab\x1d\xf1\xda\xc0\x86\xa8\x80\xca\x00\xf3\x7b\x73\xc8\x5a\x08\xd7\xb0\xda\x90\xe4\x6e\x8a\xf6\x1b\x37\x4c\x67\x97\x43\x79\x53\x07\x57\xf3\x31\xc4\x4a\x3e\xec\x80\x09\x6d\x08\xcf\x12\xa1\xed\x69\xab\x07\x32\x91\xa9\xd2\x59\xc4\xfe\x13\xdb\x59\x1f\x56\x8e\x5d\xd7\x1f\xb8\xf1\xff\x26\x5e\x97\x17\x76\xf9\x60\x2f\xa0\xa6\xe3\x75\xb9\xe3\xb7\x81\x2a\x1e\xda\xfc\x04\x71\x74\xf3\x0f\x34\x75\x3d\x5b\xba\x5e\x42\xe8\xec\xef\x0e\x76\x77\x7d\x20\x9b\x8a\xa9\x7d\xf9\xe8\x23\xcf\x32\x11\x56\x63\x5b\x57\x4c\xec\x05\x76\x54\xcb\xdf\x03\xd6\xd5\xc7\x1f\xeb\xe2\x7b\x51\xd7\x21\xf6\x46\x0b\xda\x8b\x2e\x81\x46\x34\x71\xdc\x58\x4d\x77\x65\x35\x34\x3c\x94\xc2\xbc\xac\x4f\xee\x6c\x91\x8f\x37\xd2\xcd\x37\x18\xca\x27\xf4\x8c\x24\x66\x23\x15\xfb\xb7\x5b\x73\xb6\xfd\xa0\xcf\x98\x6c\x3c\xc9\xc8\xdf\x31\xcc\x25\xc7\x8f\x4c\x04\xb6\x9e\x3d\xfc\x36\x43\x49\x8e\x79\x19\x47\x62\x76\x63\x83\xfa\x91\x93\x4e\x00\x5a\x67\xb4\x20\x75\xe2\xff\x81\xd4\xe6\x7e\x2f\x5f\xbd\xa8\x3d\x1c\xe8\xff\x3e\xc4\x4a\xa0\x7d\xde\xf7\xc9\xe4\x11\xcf\x52\x94\xcd\x4a\x76\xbd\x57\xca\xa4\xf2\xc1\xec\x55\x56\x00\x2a\xd4\x32\x51\x14\x2b\x33\xe5\x43\x8a\x4c\xc3\x29\x2a\xbf\x3a\xeb\xbe\x03\x3c\x85\x56\x3b\x78\x2a\x8f\xf6\x6c\x51\x8a\xaa\xe0\xa1\xc1\x41\x4e\x7d\x8d\xf6\x06\xdd\x25\xd5\x1e\x84\x4e\x48\x1e\x70\xa6\xb3\x1f\xf7\xc4\xd0\xcd\x33\x71\x50\xb8\x4b\xa2\x51\xd9\x99\x1f\x66\xc4\x03\x8d\x54\x65\xc1\xa3\xc1\xd4\xb3\x7a\x56\x91\x6e\x84\x0c\xd0\xf3\xf3\x65\x4f\xe8\x66\x2d\x55\x57\xfd\xed\x7b\xc0\x6f\xf2\x0a\x2e\x83\xcd\x6c\x7f\xe8\x5e\xe8\x3c\x73\xe8\x89\xf6\x4a\x7e\x06\xf9\x1c\x32\xa4\x9f\x24\x2c\x79\x54\x05\xdf\x8a\x40\x24\x66\xfb\x07\x79\x39\xf2\xe1\xa8\x94\x68\x23\xa3\x62\x22\x40\xf7\x7e\xaa\x4c\x43\xdd\x41\xea\xd0\xc1\x45\xd7\xb9\xfd\xa0\x0f\x9e\x97\xaf\x71\x59\x2d\x22\x71\xcc\x44\xd8\x79\x54\x1e\x55\xb2\x7f\x9e\xdd\x2b\x6b\xd2\x7d\x7a\x63\xb3\xb0\x4f\x6b\x60\x55\x49\xa4\x05\xab\x0d\xc0\x47\xe4\xb6\xff\x04\x00\x00\xff\xff\x6d\x0c\x70\x9a\xd9\x29\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10713, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

