// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5b\x73\xdb\xb8\x15\x7e\xf7\xaf\x38\x13\xcf\x34\xc9\x03\x2d\x3b\xd3\x6d\xb2\x9a\xf6\xc1\xb1\xb4\xae\x26\x8e\xa4\x91\x14\x67\xdf\x34\x20\x78\x44\x61\x05\x02\x2c\x00\xd2\x56\x7f\x7d\x07\xe0\x45\xbc\x49\x91\xaf\xbb\x99\xfa\x49\x06\x70\x3e\x9c\xfb\x85\xa4\xe7\x79\x27\x24\x66\xb7\xa8\x34\x93\xa2\x0f\x78\x6f\x50\xd8\x9f\xba\x97\x5e\xf8\x68\xc8\xc5\xc9\x86\x89\xa0\x0f\x03\x82\x91\x14\x73\x34\x27\x11\x1a\x12\x10\x43\xfa\x27\x00\x82\x44\xd8\x87\x94\x29\xc3\xd1\xe4\xff\xeb\x98\x50\xec\xc3\x26\xf1\xd1\xd3\x5b\x6d\x30\x3a\xd1\x31\x52\x7b\xdc\x60\x14\x73\x62\xd0\xfe\x06\xa8\x02\xd9\xbf\x26\x98\xfd\xe3\xc4\x47\xae\x8b\x13\x00\x2a\x11\x86\x35\x8f\x15\xf0\xf6\x6f\x2d\xb5\x19\xa3\xb9\x93\x6a\xd3\x07\xa3\x12\xcc\xd7\x03\xa1\xa7\x92\x33\xba\xed\xc3\x15\x4f\xb4\x41\xf5\x1b\x53\xda\x7c\x67\x66\xfd\xef\x8c\x24\x3f\x78\xea\x20\xa6\xa3\x01\x30\xed\x00\xc0\x48\x78\x77\xf1\x1e\x50\x10\x9f\x23\xdc\x7e\xd5\x76\x45\x27\x2a\x65\x29\x16\x7c\x00\x95\xc2\x10\x26\x50\x81\x42\x6d\x88\xda\xc1\xbd\x33\x12\x7c\x04\xba\x46\xba\xc1\xe0\x3d\x10\x11\xc0\xbb\x0f\xef\x2d\x48\x0e\x69\xd6\x08\x89\x46\x90\x2b\x10\x1a\x85\x41\x05\x4c\x00\x13\xac\x02\x5b\x11\x6f\x3a\x1a\xd4\x44\x3b\x05\x5f\x4a\xa3\x8d\x22\x31\xc4\x4a\x52\x0c\x12\x85\x20\x10\x03\xc7\x29\x55\x48\x0c\x02\xb1\x58\x2b\x16\x46\x24\xb6\xe8\x15\xf3\xec\xac\x96\x03\x6a\x54\x29\xa3\x78\x49\xa9\x4c\x84\x19\xd7\xcc\x52\xde\x29\x05\xdf\x5a\x73\xc0\x6d\xae\x81\x58\x06\x1a\xa4\x70\xd2\x08\x19\xa0\x86\x3b\x66\xd6\xd6\xa3\x14\x99\x65\x66\xfb\x57\xa1\x2d\x67\xd6\x1c\x8a\xac\x56\x56\xd4\xed\xce\xc8\x96\xfa\xb2\xb5\x0a\xa0\xf0\x3f\x09\x53\x18\x0c\x12\xc5\x44\x38\xa7\x6b\x0c\x12\xce\x44\x38\x0a\x85\x2c\x97\x87\xf7\x48\x13\x63\x9d\xb9\x42\x99\x61\xce\x91\x23\x35\x52\x2d\x50\x45\xba\xbe\xed\x41\x44\x0c\x5d\x0f\xef\x63\x85\xda\xf9\x7f\x7d\xdf\x9e\xd8\xe0\xb6\x5f\x13\xa7\x71\x02\x40\xc6\xa8\x88\x91\xaa\x0f\x23\xd1\xda\x4c\x09\x4f\xb0\x05\x6b\x81\x1b\xba\xb5\x72\x5f\x15\x76\x2f\x09\x4e\x61\xb1\xc6\x86\x53\x00\x95\x31\x43\x5d\x00\xbc\xd5\xb0\xe2\x78\x9f\x4a\x9e\x44\x08\x81\x62\x69\xe9\x37\xa7\xd6\x13\xac\x65\x02\x5c\x91\x84\x1b\x67\x7f\x67\x35\x9e\x84\x4c\x40\xc0\x94\x73\x4c\x14\x3a\x51\xa8\xc1\xac\xc9\xce\x83\x1d\x1d\x53\x4e\x77\xf6\x3a\xeb\x5a\x18\x80\xbf\x05\xce\x7c\x7b\x37\xfc\xad\x8c\x03\xbc\x67\xda\x14\x6e\x60\xbd\xf5\xa4\x90\x32\x0b\xef\x58\x61\x4c\x14\x7a\xd6\x1e\xa5\x2a\x58\x44\x42\xec\x43\xc4\x14\x11\x86\xe9\x5e\x3d\x07\xe4\xfb\xd3\x84\xf3\x22\x84\x47\xab\xb1\x34\x53\x85\x36\x5a\xca\x53\x54\x46\x11\x11\xc1\x4e\xc3\x1e\xf4\xaa\xd7\x9d\xe9\x75\xb9\x95\xe9\xe8\xab\xf5\x6f\x5d\x25\xc8\x98\xdc\x7c\xd2\xde\x4e\x93\x5e\xa6\x23\xed\x05\x4c\x55\xac\x17\x59\xe2\x29\x31\xeb\x3e\xf4\x72\x6d\x7a\x75\x82\x16\xae\x4a\x44\x0b\x40\xc9\x98\x84\xc4\x39\x2c\x7c\x66\x99\x9a\x99\x14\x84\xef\xb9\xaa\x8a\x51\xe0\x06\x92\x6e\x50\x69\x49\x37\x7b\x88\x52\xa2\x2c\x61\x2f\x3b\x78\x56\x3b\x59\x80\x70\x19\xee\xa1\xb6\x66\xac\xee\x9e\xc2\x4a\xaa\xcc\x55\x98\x08\x9d\xaf\x64\x57\x70\xe6\xf7\x72\x97\xe8\x39\x9b\xe9\xcc\x1f\x5c\x5e\xa8\x59\xbc\xb8\x34\x25\xca\xe3\xcc\x3f\x70\xb1\xd7\x3c\x52\x0a\x8d\xe9\x1e\xb2\xea\x8e\x46\x9a\x28\x66\xb6\x36\xa0\xf0\xde\x54\xc3\x2f\x56\x2c\x65\x1c\x43\x0c\x6a\xe9\x14\x00\x45\xda\xf6\x89\xdb\xd1\x6c\x71\x33\x5c\x2c\x07\xa3\xf9\xe5\xe7\x9b\xe1\xf2\xcb\xed\xd7\x0a\x96\x0b\xee\xdf\x94\x8c\xea\xf1\x9d\xa5\xdc\xaf\x24\xfe\x82\xdb\x19\xae\x9a\xc1\x5f\xab\x78\x5e\x76\xb8\x71\xc4\x25\x9d\x80\x69\x5b\x28\x96\x9b\x34\x6a\x6c\xcb\x38\x73\x96\x5c\x82\x93\xf2\xda\x46\xf6\x28\x8d\x9c\x59\xe7\xe8\xc8\x3b\x85\x91\x00\x4a\x34\xc2\x9d\x4d\x3e\x7f\x20\x35\xc0\x25\x25\xbc\x0c\x78\x87\x60\x77\xef\x88\x30\x36\xcb\xd8\x4a\xc6\x0c\x08\x69\x40\xae\x56\x8c\x32\xc2\xf9\x16\x48\x4a\x18\x77\xd5\x4e\x0a\x7c\x86\xc0\xce\x05\x39\x26\xa6\xab\xae\xa1\xb7\xba\xb7\xd2\x3d\x1a\x2a\x99\xc4\x27\x4d\x4b\x34\x96\xeb\xa4\xd6\xb9\x23\x19\x24\x1c\x75\x8b\xb0\xbd\xae\x90\x04\x13\xc1\xb7\x0d\xd7\xaa\x43\xda\xba\xdd\xc2\x6a\x2c\x1e\x05\x54\x4f\x2c\x4f\x49\x36\x5e\x2b\x6f\x58\xb9\x9b\x6e\xd1\xdd\xac\xed\xa3\x6e\x3a\x1d\xec\x71\xc6\x36\xb5\xcd\x59\x3f\xa0\xf6\x6c\x32\x43\xa3\x2b\x2e\x6b\x4b\x0f\x97\xa1\x2b\x6a\xac\x2c\x57\x6b\x54\x08\x3e\x52\xe2\x5a\x2d\xb3\x46\x75\xc7\x34\x96\x25\xec\x8e\x71\x6e\xdb\xa7\x20\xa1\x08\xa8\x94\x54\x55\x48\xce\x36\xb6\x4f\x63\x15\xc7\x3a\x85\x6f\x79\xfb\x26\x6d\x55\xf3\xf2\x3e\x8b\xae\x89\x0a\x30\x85\x15\xe3\x08\x6f\x33\x1d\xc8\xb0\x97\x46\xba\x47\x56\xc1\xc7\x5f\x7c\xdf\xf7\x3e\xe1\xaf\x1f\xbd\x8b\x0b\xfc\xe8\xfd\xfa\xcb\x3f\x2e\xbc\xf3\x0f\x7f\xff\x70\x4e\xe8\xf9\xf9\xf9\xf9\x87\x1e\x65\x4a\x49\xed\xa5\xd1\xf2\xfc\x8c\xcb\xf0\x6d\x1f\xc6\xb6\xdb\xa4\xeb\x0c\x51\xaa\xb2\x14\x6f\xdb\xd9\x34\xd2\xde\xfe\x34\x5e\x61\xa5\x9d\xfc\x73\x65\xfe\x98\xba\x6d\xb4\x3f\x35\x1d\xcf\x67\xa3\xc9\xed\x72\xfe\x6d\x3a\x9d\xcc\x16\xaf\x96\x90\xb5\x62\x32\x5d\xea\x24\x8e\x65\xcd\x33\xa1\x9d\x92\xf7\x31\xfe\x97\xae\x23\xc5\xb2\x4d\x3e\x4c\xa0\xd6\x53\x25\x7d\xac\x5e\x8b\xf7\xbb\x99\xab\xe0\xb1\x91\xa5\x33\xa9\x7b\x3e\x13\xbd\x4a\x96\xce\x56\x3d\xda\x58\xd0\x92\x12\x03\x1e\x7c\x1b\x8f\x7e\xef\x37\x63\xbf\x57\x8d\x75\x4f\x49\xf8\xa7\x75\xaa\x9e\x48\x38\x6f\xd4\xb7\xce\xce\xf1\xaf\x5e\xdf\x8e\x29\x5c\xcf\x97\xe1\x4f\xb3\xba\xe3\xda\xfd\x6a\x51\x03\xa2\xb0\x1c\xb1\x6c\x73\xaf\x93\x18\x55\xc4\xc4\x4f\x58\x0f\x7f\xc6\xba\x55\x47\x49\xb4\xe3\xc1\x86\x99\x9b\x2e\x94\x40\x83\xba\x1c\x34\xf2\x09\xa3\x97\xb9\x4e\xcf\x1e\x6b\x5d\x74\xc4\x14\xd3\x2d\x77\x7e\x49\xcf\x4e\xf4\x9d\xa8\x76\xa3\x73\x1a\x3a\xa6\xbf\x78\x7c\xa9\xaa\x9e\x40\x43\x0b\xeb\xe6\xa3\x46\x8b\x53\xb7\xec\xd9\xdf\x9e\x51\x44\x68\xee\x18\x6b\xd7\x3e\x27\xcd\x7e\x5e\x76\xda\xaf\x1d\xfa\xff\x1a\x2c\xf6\x32\x3d\xf9\x3e\xbe\x99\x5c\x0e\x96\xd3\xd9\x64\x31\xb9\x9a\xdc\xbc\x1e\xeb\xf2\x4e\x70\x49\x82\x65\xac\xa4\x91\x54\xf2\xc7\x09\x70\x33\xb9\xbe\x19\xde\x0e\x5f\x8f\x6f\x2e\x43\x8e\x29\x3e\x92\xdd\xab\xcb\x9b\xd1\xd5\x64\x39\xff\xf6\x79\x3c\x7c\xbd\x76\x87\x12\xce\xa8\xf4\x74\xe2\x0b\x7c\x60\xbb\x33\xfa\x7a\x79\x3d\x5c\xce\x86\xd7\xc3\xdf\xa7\xcb\xc5\xec\x72\x3c\xbf\xb9\x5c\x8c\x26\xe3\x57\xe3\xdd\x65\x81\xa5\xc2\x10\xef\xe3\x65\x25\x0f\x3c\xad\x6b\xbb\x99\x5c\x5f\x8f\xc6\xd7\xaf\x1e\xa8\x5c\x86\x21\x13\xcd\x23\x47\x32\xff\xd3\xf6\xca\xb3\xcb\xef\xcb\xc1\xf0\x76\x74\x35\x9c\xbf\x1a\xdb\x8a\xdc\x2d\x03\x4c\x19\xad\x55\x96\x23\x98\xce\x3c\xbe\xe2\xea\xf3\xe5\x60\x34\x6b\xf2\x7d\xb8\x84\x15\x58\x5f\xbe\x7d\x1e\xce\xc6\xc3\xc5\x70\xbe\x9c\x4e\x06\xd6\xeb\x5a\x0a\xe8\xc3\x9b\x46\x89\x7a\xf3\xa7\xb7\xef\xb6\xfd\xc9\x25\x73\xcf\x1a\x0f\xf4\xeb\x95\x02\xff\x72\x4f\x81\xd3\x48\x3f\xf4\x41\xd1\x6b\x77\x90\x4f\x1d\xe0\x8f\x1b\xbf\xbd\xbd\xfd\xf9\xe1\xce\x3e\xd3\x58\xe5\x5d\x84\x45\xad\x3c\x5b\x59\x49\xe5\x1e\xf6\xdb\xa8\x81\x2c\x6a\x80\x50\x8a\x5a\x97\xf6\x76\x6f\xae\x2c\x7e\xb5\x51\x6a\x73\xd8\x94\xe6\x20\x61\xf7\xd3\xbc\x8e\x67\x79\x07\x51\xba\x06\x99\x2e\x35\x1d\x04\xa9\x4d\x29\xad\xc1\xe5\x20\x69\x75\x8c\x6b\x0e\x76\xa7\xb0\x98\x0c\x26\xb6\xdb\x11\x6f\x0d\xac\x89\x0a\xa8\x0c\x30\x7f\xe0\x0f\xd9\x08\xe1\x06\x56\x9b\x92\xdc\x23\xae\x1d\xe1\x9a\xe9\xec\xa9\x56\x3e\xd4\xc1\xd5\x6c\x04\xb1\x92\xf7\x5b\x60\x42\x1b\xc2\xb3\x42\x68\x67\xda\xea\x85\x4c\x64\xa6\x74\x1e\xb1\x7b\x37\x78\x76\x8c\x28\x87\xde\x33\xec\x79\x55\xf1\x43\xbc\xae\x28\xec\x8a\xc1\xa3\x80\x9a\x81\xd7\x15\x8e\x3f\x06\xaa\x44\x68\xf3\xdd\xc9\x41\xe2\x27\x0c\x75\x47\x8e\x74\x47\x29\xa1\x73\xbe\xdb\x3b\xdd\x1d\x03\xd9\x34\x4c\xed\x95\xcd\x31\xfa\x2c\x0b\x61\x35\xb7\x75\xe5\xc4\xa3\xc0\x0e\x5a\xf9\x21\x60\x5d\x73\xfc\xa1\x29\xfe\x28\xee\x3a\xd4\xde\x18\x41\x8f\xe2\x4b\xa0\x11\x4d\x1c\xb7\x56\xb3\x5d\xd9\x0d\xf5\xf7\x95\x30\x2f\x9b\x93\x3b\x47\xe4\xc3\x83\x74\xf3\xe3\x11\xe5\x13\x7a\x46\x12\xb3\x96\x8a\xfd\xd7\x9d\x39\xdb\x7c\xd2\x67\x4c\x36\xbe\x25\xc9\x3f\xc0\x98\x49\x8e\x9f\x99\x08\x6c\x3f\xbb\xff\xa3\x12\x25\x39\xe6\x6d\x1c\x89\xd9\xb5\x4d\xea\x07\x6e\x3a\x01\x68\xdd\xd1\x82\xd4\x89\xff\x07\x52\x5b\xfb\xbd\xfc\xf4\xbc\xf6\xc5\xc3\xf1\x1f\xb6\x58\x0d\xb4\xef\x7b\x98\x4e\x1e\xf1\x3d\x8d\xb2\x55\xc9\x9e\xf7\x4a\x9d\x54\xde\xf4\xbd\xc9\x1a\x40\x85\x5a\x26\x8a\x62\x65\xa7\xfc\x02\x24\xb3\x70\x8a\xca\xaf\xee\xba\x17\x18\xcf\x61\xd5\x0e\x99\xca\xab\x3d\xdb\x94\xa2\x2a\x64\x68\x48\x90\x73\x5f\xe3\xbd\xc1\x77\xc9\xb5\x07\xa1\x53\x92\x07\x9c\xe9\xec\xc7\x1d\x31\x74\xfd\x42\x12\x14\xe1\x92\x68\x54\x76\xe7\xc9\x82\x78\xa0\x91\xaa\x2c\x79\x34\x84\x7a\xd1\xc8\x2a\xca\x8d\x90\x01\x7a\x7e\x7e\xec\x19\xc3\xac\x65\xea\x6a\xbc\x3d\x04\xfc\x3a\xef\xe0\x32\xd8\xcc\xf7\xfb\xee\xd3\xa2\x17\x4e\x3d\xd1\xce\xc8\x2f\xa0\x9f\x7d\x8e\xf4\x93\xa4\x25\x8f\xaa\xe0\x47\x19\x88\xc4\x6c\xf7\x25\x61\x8e\xbc\x3f\x2b\x25\xda\xc8\xa8\xd8\x08\xd0\x7d\xf8\x55\x96\xa1\xee\x24\xb5\xef\xe2\x62\xea\xdc\x7c\xd2\x7b\xef\xcb\xcf\xb8\xaa\x16\x91\x38\x66\x22\xec\xbc\x2a\xcf\x2a\xd9\x3f\x2f\x1e\x95\x35\xed\x3e\xbf\xb3\x59\xd8\xe7\x75\xb0\xaa\x26\xd2\x42\xd4\x06\xe0\x23\x6a\xdb\xff\x02\x00\x00\xff\xff\x62\x4f\x1b\xc6\x92\x2a\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10898, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

